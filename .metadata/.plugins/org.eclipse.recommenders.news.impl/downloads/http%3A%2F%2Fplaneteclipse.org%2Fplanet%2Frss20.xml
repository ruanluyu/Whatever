<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Orion: Announcing Orion 17</title>
	<guid isPermaLink="false">http://planetorion.org/news/?p=910</guid>
	<link>http://planetorion.org/news/2018/01/announcing-orion-17/</link>
	<description>&lt;p&gt;We are pleased to announce the seventeenth release of Orion, “Your IDE in the Cloud”. You can run it now at &lt;a href=&quot;https://orionhub.org/&quot;&gt;OrionHub,&lt;/a&gt; from &lt;a href=&quot;https://www.npmjs.com/package/orion&quot;&gt;NPM&lt;/a&gt; or &lt;a href=&quot;http://download.eclipse.org/orion/drops/R-17.0-201801111044/index.html&quot;&gt;download the server&lt;/a&gt; to run your own instance locally.&lt;/p&gt;
&lt;p&gt;Once again, thank you to all committers and contributors for your hard work this release. There were 86 bugs and enhancements fixed, across 248 commits from 13 authors!&lt;/p&gt;
&lt;p&gt;This release was focussed entirely on making compatibility, stability and overall quality improvements to the Node.js server.&lt;/p&gt;</description>
	<pubDate>Thu, 11 Jan 2018 18:52:41 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: German TUV Sud Joins Eclipse openPASS Working Group</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/2K_LU5LxqMs/OpenPASS-WG</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/2K_LU5LxqMs/OpenPASS-WG</link>
	<description>On Jan 1, 2018 the German TUV Sud has joined as a new member of the Eclipse Foundation &amp;amp; Eclipse openPASS Working Group.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/2K_LU5LxqMs&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 11 Jan 2018 16:10:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: SWT Spy – debugging SWT layouts</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=37780</guid>
	<link>https://eclipsesource.com/blogs/2018/01/10/swt-spy-debugging-swt-layouts/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Do you have to debug an existing SWT view and you are not sure what elements are really on screen? Are you tired of manually coloring composites to find out what’s wrong in your layout?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is time to remember an oldie but goodie: The SWT spy!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is a fairly old tool, but still very useful, so let us have a quick look.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Spy can augments a running tool and provide valuable information to debug any SWT application. This can be the IDE in case you are a plugin developer or any RCP or Eclipse 4 application. You can get SWT spy from this location:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://download.eclipse.org/eclipse/updates/4.7&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Either add it to your target platform or directly install it into your IDE.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In case you install SWT spy into the IDE, you can open it by pressing:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;SHIFT+CTRL+ALT+F9&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you would like to use SWT spy in a custom application, you need to include the bundle “org.eclipse.tools.layout.spy” into your product. To trigger the spy, there are two options:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you run on the compatibility layer (3.x), the key binding will also work&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are running on Eclipse 4, you can embed the following code to open the SWT spy window:&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;final LayoutSpyDialog popupDialog = new LayoutSpyDialog(shell);
popupDialog.open();&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The SWT spy will open as a separate dialog, which is connected to the running application. It allows for the inspection of any SWT element with a focus on layout information. To navigate you can either browse the hierarchy or directly jump to an element. The hierarchy is shown as a list on the left side. By double clicking on an element within the current container you will walk down the SWT widget tree, the button on the top left corner will send you one level up. To jump to a specific element, click the button “Select Control” and hover over any element in the running application. A yellow border will help you with the selection. If you check the option “Show overlay”, SWT spy will draw a yellow border around the currently selected element.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-37781 size-full&quot; height=&quot;393&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/01/image2.jpg&quot; width=&quot;1193&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The text field on the right side shows the layout data of the current parent composite. If you select an element on the left, you see its layout data in the text field below. This is very helpful to debug layouts. Furthermore, you can use existing layouts as a template. The SWT spy directly shows you how to create the layout data for a selected element, e.g.&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;GridDataFactory.fillDefaults()
    .grab(true, false)
    .align(SWT.FILL, SWT.BEGINNING)
    .minSize(0, 0)
    .hint(107, SWT.DEFAULT)&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;During our work on &lt;/span&gt;&lt;a href=&quot;http://emfforms.org&quot;&gt;&lt;span&gt;EMF Forms&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, we often develop or adapt renderers. The goal of EMF Forms is to ease the creation of forms, especially concerning the layout. However, before this can happen, you must first create a renderer which will take care of the layout for you. EMF Forms ships with default layouts, but you might want to adapt them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When debugging the layout of a combination of renderers, it is often helpful to visualize all elements, which are on screen. Sometimes, elements are not visible (e.g. composites) or have the same background color as their parent. For this purpose, the SWT spy allows you to color controls. If you check the option “Color controls …”, the spy will assign different background colors to each level in your widgets tree. This looks ugly, but is helpful in finding hidden composites or to see how much space certain elements occupy.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-37782 size-full&quot; height=&quot;270&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/01/image1.jpg&quot; width=&quot;735&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 10 Jan 2018 13:28:45 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: RHAMT Eclipse Plugin 4.0.0.Final has been released!</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/windup_4.0.0.ga_release.html</guid>
	<link>https://tools.jboss.org/blog/windup_4.0.0.ga_release.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are happy to announce the latest release of the Red Hat Application Migration Toolkit (RHAMT) Eclipse Plugin.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;getting-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#getting-started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It is now available through JBoss Central, and from the update site &lt;a href=&quot;http://download.jboss.org/jbosstools/oxygen/stable/updates/rhamt/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-rhamt&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-rhamt&quot;&gt;&lt;/a&gt;What is RHAMT?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;RHAMT is an automated application migration and assessment tool.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Example ways to RHAMT up your code:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Moving your application from WebLogic to EAP, or WebSphere to EAP&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Version upgrade from Hibernate 3 to Hibernate 4, or EAP 6 to EAP 7&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Change UI technologies from Seam 2 to pure JSF 2.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;An example of how to run the RHAMT CLI:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;$ ./rhamt-cli --input /path/to/jee-example-app-1.0.0.ear --output /path/to/output --source weblogic --target eap:7&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The output is a report used to assess and prioritize migration and modernization efforts.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;the-rhamt-eclipse-plugin-what-does-it-do&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#the-rhamt-eclipse-plugin-what-does-it-do&quot;&gt;&lt;/a&gt;The RHAMT Eclipse Plugin - What does it do?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Consider an application migration comprised of thousands of files, with a myriad of small changes, not to mention the tediousness of switching between
       the report and your IDE. Who wants to be the engineer assigned to that task? :)
      Instead, this tooling marks the source files containing issues, making it easy to organize, search, and in many cases automatically fix issues using quick fixes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let me give you a quick walkthrough.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;ruleset-wizard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#ruleset-wizard&quot;&gt;&lt;/a&gt;Ruleset Wizard&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We now have quickstart template code generators.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Rueset Wizard&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/ruleset_wizard.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;rule-creation-from-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#rule-creation-from-code&quot;&gt;&lt;/a&gt;Rule Creation From Code&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We have also added rule generators for selected snippets of code.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Rule Generation From Source&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/type_implements.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;ruleset-graphical-editor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#ruleset-graphical-editor&quot;&gt;&lt;/a&gt;Ruleset Graphical Editor&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Ruleset navigation and editing is faster and more intuitive thanks to the new graphical editor.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Graphical Editor&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/ruleset_editor.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;ruleset-view&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#ruleset-view&quot;&gt;&lt;/a&gt;Ruleset View&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We have created a view dedicated to the management of rulesets. Default rulesets shipped with RHAMT can now be opened, edited, and referenced while authoring
      your own custom rulesets.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Ruleset View&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/ruleset_view.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;run-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#run-configuration&quot;&gt;&lt;/a&gt;Run Configuration&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Eclipse plugin interacts with the RHAMT CLI process, thereby making it possible to specify command line options and custom rulesets.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Run Configuration&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/run_configuration.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;ruleset-submission&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#ruleset-submission&quot;&gt;&lt;/a&gt;Ruleset Submission&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Lastly, contribute your custom rulesets back to the community from within the IDE.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Ruleset Submission&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/ruleset_submission.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more detailed information &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_application_migration_toolkit/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our goal is to make the RHAMT tooling easy to use. We look forward to your feedback and comments!&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Have fun!&lt;br /&gt;
      John Steele&lt;br /&gt;
      &lt;a href=&quot;https://github.com/johnsteele/&quot;&gt;github/johnsteele&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 10 Jan 2018 07:42:24 +0000</pubDate>
</item>
<item>
	<title>InfoQ Eclipse feed: Hazelcast Joins the Eclipse Foundation</title>
	<guid isPermaLink="true">http://www.infoq.com/news/2018/01/hazelcast-joins-eclipse?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</guid>
	<link>http://www.infoq.com/news/2018/01/hazelcast-joins-eclipse?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</link>
	<description>&lt;img src=&quot;http://www.infoq.com/styles/i/logo_bigger.jpg&quot; /&gt;&lt;p&gt;Hazelcast, a provider in open source In-Memory Data Grid (IMDG), recently joined the Eclipse Foundation to work with the other members of the Eclipse community to mainly focus on JCache, Eclipse MicroProfile, and EE4J. Greg Luck, CEO at Hazelcast, spoke to InfoQ about Hazelcast joining the Eclipse Foundation.
&lt;/p&gt; &lt;i&gt;By Michael Redlich&lt;/i&gt;</description>
	<pubDate>Tue, 09 Jan 2018 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Eclipse Collections 9.1 Released</title>
	<guid isPermaLink="false">https://medium.com/p/24c413d200ec</guid>
	<link>https://medium.com/@donraab/eclipse-collections-9-1-released-24c413d200ec?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;New Features, more languages, better symmetry and other improvements&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*ZgPZPNVLMlletjZogDJ76w.png&quot; /&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; is a collections framework for Java. It has optimized List, Set and Map implementations with a rich and fluent API. The library provides additional data structures not found in the JDK like Bags, Multimaps and BiMaps. The framework also provides primitive versions of Lists, Sets, Bags, Stacks and Maps with a rich and fluent API. There is support for both Mutable and Immutable versions of all containers in the library.&lt;/blockquote&gt;&lt;p&gt;The Eclipse Collections community continues to grow. There were ten developers who contributed to the Eclipse Collections 9.1.0 release. I want to thank everyone who made a contribution. If this was your first contribution to an open source project, congratulations and welcome!&lt;/p&gt;&lt;p&gt;The release notes for Eclipse Collections 9.1.0 are here:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/9.1.0&quot;&gt;eclipse/eclipse-collections&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;Multi-language Website&lt;/h4&gt;&lt;p&gt;In addition to code contributions, several developers worked on translating our Eclipse Collections Website to other spoken languages. This is an amazing example of how you can use more than just your coding skills to help open source projects. Thank you to both the contributors and reviewers!&lt;/p&gt;&lt;p&gt;Here are our website links:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;English&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/ja/index.html&quot;&gt;Japanese&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/ru/index.html&quot;&gt;Russian&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/pt-br/index.html&quot;&gt;Brazilian Portuguese&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A Chinese translation is in the works, and we will be looking to add other languages in the future. Please feel to submit an issue or pull request if you’d like to work on a translation to a spoken language you are fluent in.&lt;/p&gt;&lt;h4&gt;The Eclipse Collections Katas&lt;/h4&gt;&lt;p&gt;Both of the Eclipse Collections katas are now available in &lt;a href=&quot;https://revealjs.com/#/&quot;&gt;Reveal.js&lt;/a&gt; as of this release.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/company-kata/#/&quot;&gt;Company Kata&lt;/a&gt; (&lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata/blob/master/docs/company-kata/slides.md&quot;&gt;markdown file&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/pet-kata/#/&quot;&gt;Pet Kata&lt;/a&gt; (&lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata/blob/master/docs/pet-kata/slides.md&quot;&gt;markdown file&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We also had our first ever contribution of a live video demonstration of the Eclipse Collections Pet Kata using Eclipse Oxygen presented in Brazilian Portuguese. Great work and thank you Leo!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=1TH0tdU_esQ&quot;&gt;https://www.youtube.com/watch?v=1TH0tdU_esQ&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It would be great to have multi-language translations of our katas as well. Our katas are hosted now as simple markdown files which get translated to web based slides using &lt;a href=&quot;https://revealjs.com/#/&quot;&gt;Reveal.js&lt;/a&gt;. Feel free to submit a pull request if you’d like to translate the katas to another spoken language.&lt;/p&gt;&lt;h4&gt;New Collectors&lt;/h4&gt;&lt;p&gt;Several new Collector implementations were added to the Collectors2 utility class in this release. We continue to look to provide good integration between the Streams library and Eclipse Collections. Here’s an example of using the new &lt;em&gt;countBy&lt;/em&gt; Collector with a Stream of String.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void countBy()&lt;br /&gt;{&lt;br /&gt;    Stream&amp;lt;String&amp;gt; stream = Stream.&lt;em&gt;of&lt;/em&gt;(&lt;br /&gt;            &lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;tHrEe&quot;&lt;/strong&gt;);&lt;br /&gt;&lt;br /&gt;    Bag&amp;lt;String&amp;gt; counts =&lt;br /&gt;            stream.collect(&lt;br /&gt;                    Collectors2.&lt;em&gt;countBy&lt;/em&gt;(String::toLowerCase));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(1, counts.occurrencesOf(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(2, counts.occurrencesOf(&lt;strong&gt;&quot;two&quot;&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, counts.occurrencesOf(&lt;strong&gt;&quot;three&quot;&lt;/strong&gt;));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;You can now consider using the &lt;em&gt;countBy&lt;/em&gt; Collector as an alternative to using the &lt;em&gt;groupingBy&lt;/em&gt; and &lt;em&gt;counting&lt;/em&gt; alternative from the JDK shown below.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void groupingByCounting()&lt;br /&gt;{&lt;br /&gt;    Stream&amp;lt;String&amp;gt; stream = Stream.&lt;em&gt;of&lt;/em&gt;(&lt;br /&gt;            &lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;tHrEe&quot;&lt;/strong&gt;);&lt;br /&gt;&lt;br /&gt;    Map&amp;lt;String, Long&amp;gt; counts =&lt;br /&gt;            stream.collect(&lt;br /&gt;                    Collectors.&lt;em&gt;groupingBy&lt;/em&gt;(String::toLowerCase,&lt;br /&gt;                            Collectors.&lt;em&gt;counting&lt;/em&gt;()));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Long.&lt;em&gt;valueOf&lt;/em&gt;(1), counts.get(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Long.&lt;em&gt;valueOf&lt;/em&gt;(2), counts.get(&lt;strong&gt;&quot;two&quot;&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Long.&lt;em&gt;valueOf&lt;/em&gt;(3), counts.get(&lt;strong&gt;&quot;three&quot;&lt;/strong&gt;));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;There were also Collectors added for &lt;strong&gt;&lt;em&gt;groupByEach&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;groupByUniqueKey &lt;/em&gt;&lt;/strong&gt;on the &lt;strong&gt;&lt;em&gt;Collectors2&lt;/em&gt;&lt;/strong&gt; class in this release.&lt;/p&gt;&lt;h4&gt;&lt;a href=&quot;https://medium.com/@donraab/symmetric-sympathy-2c59d4541d60&quot;&gt;Symmetric Sympathy&lt;/a&gt; Continues&lt;/h4&gt;&lt;p&gt;You can now use &lt;em&gt;zip&lt;/em&gt; with primitive Lists. There are two varieties of zip for primitive Lists.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Zipping a primitive and an object List.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;@Test&lt;br /&gt;public void zipPrimitiveWithObject()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;IntObjectPair&amp;lt;String&amp;gt;&amp;gt; zipped =&lt;br /&gt;            IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3)&lt;br /&gt;                    .zip(Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;));&lt;br /&gt;&lt;br /&gt;    List&amp;lt;IntObjectPair&amp;lt;String&amp;gt;&amp;gt; expected =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(1, &lt;strong&gt;&quot;one&quot;&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(2, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(3, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, zipped);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;2. Zipping two primitive Lists of the same type.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void zipIntToInt()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;IntIntPair&amp;gt; zipped =&lt;br /&gt;            IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3)&lt;br /&gt;                    .zipInt(IntInterval.&lt;em&gt;oneTo&lt;/em&gt;(3).asReversed());&lt;br /&gt;&lt;br /&gt;    List&amp;lt;IntIntPair&amp;gt; expected =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(1, 3),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(2, 2),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(3, 1));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, zipped);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;There is a zip&amp;lt;Type&amp;gt; method for each primitive type. Here is an example of the &lt;em&gt;zipChar&lt;/em&gt; method available on &lt;em&gt;CharAdapter&lt;/em&gt;, which is an &lt;em&gt;ImmutableCharList&lt;/em&gt;. We can obtain a &lt;em&gt;CharAdapter&lt;/em&gt; now simply by using the new &lt;em&gt;Strings&lt;/em&gt; factory class.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void zipCharToChar()&lt;br /&gt;{&lt;br /&gt;    ImmutableList&amp;lt;CharCharPair&amp;gt; zipped =&lt;br /&gt;            Strings.&lt;em&gt;asChars&lt;/em&gt;(&lt;strong&gt;&quot;hello&quot;&lt;/strong&gt;)&lt;br /&gt;                    .zipChar(Strings.&lt;em&gt;asChars&lt;/em&gt;(&lt;strong&gt;&quot;hello&quot;&lt;/strong&gt;).asReversed());&lt;br /&gt;&lt;br /&gt;    List&amp;lt;CharCharPair&amp;gt; expected =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(&lt;strong&gt;'h'&lt;/strong&gt;, &lt;strong&gt;'o'&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(&lt;strong&gt;'e'&lt;/strong&gt;, &lt;strong&gt;'l'&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(&lt;strong&gt;'l'&lt;/strong&gt;, &lt;strong&gt;'l'&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(&lt;strong&gt;'l'&lt;/strong&gt;, &lt;strong&gt;'e'&lt;/strong&gt;),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(&lt;strong&gt;'o'&lt;/strong&gt;, &lt;strong&gt;'h'&lt;/strong&gt;));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, zipped);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Abandoning Symmetry for a better design&lt;/h4&gt;&lt;p&gt;Sometimes providing good symmetry may not be the best solution to a problem. There has been a method called &lt;em&gt;zipWithIndex&lt;/em&gt; available on Eclipse Collections object collections for a very long time. &lt;em&gt;ZipWithIndex&lt;/em&gt; was added before we had primitive collections in Eclipse Collections, so its return type unfortunately boxes an Integer for the index. I did not want to add a primitive version of of the same API. Instead, I added a new method to both object and primitive Lists (Symmetry!) called &lt;strong&gt;&lt;em&gt;collectWithIndex&lt;/em&gt;&lt;/strong&gt;. &lt;em&gt;CollectWithIndex&lt;/em&gt; can be used to implement &lt;em&gt;zipWithIndex &lt;/em&gt;by collecting to a &lt;em&gt;ObjectIntPair&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void whereIsZipWithIndex()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Pair&amp;lt;String, &lt;strong&gt;Integer&lt;/strong&gt;&amp;gt;&amp;gt; original =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;)&lt;br /&gt;                    .zipWithIndex();&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;ObjectIntPair&amp;lt;String&amp;gt;&amp;gt; improved =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;)&lt;br /&gt;                    .collectWithIndex(PrimitiveTuples::&lt;em&gt;pair&lt;/em&gt;);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            original.get(0).getTwo().intValue(),&lt;br /&gt;            improved.get(0).getTwo());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            original.get(1).getTwo().intValue(),&lt;br /&gt;            improved.get(1).getTwo());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            original.get(2).getTwo().intValue(),&lt;br /&gt;            improved.get(2).getTwo());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Ideally, &lt;em&gt;zipWithIndex&lt;/em&gt; would have returned &lt;em&gt;ObjectIntPair&lt;/em&gt;, but this type wasn’t available when the API was originally added. Since we don’t like breaking backwards compatibility on existing methods unless there is a very compelling reason to, we’ll probably never change the return type for &lt;em&gt;zipWithIndex&lt;/em&gt;. The &lt;em&gt;collectWithIndex&lt;/em&gt; method can return any type you want, not just a Pair. I believe &lt;em&gt;collectWithIndex&lt;/em&gt; will prove to be a more useful method than &lt;em&gt;zipWithIndex&lt;/em&gt; in the long run.&lt;/p&gt;&lt;h4&gt;And of there is more…&lt;/h4&gt;&lt;p&gt;Have a look at some of the other features listed in the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/9.1.0&quot;&gt;release notes&lt;/a&gt;. We look forward to seeing more contributors to Eclipse Collections in the future.&lt;/p&gt;&lt;p&gt;Happy New Year and have fun using Eclipse Collections 9.1 in your Java projects!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=24c413d200ec&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 05 Jan 2018 19:39:34 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: Time for a New Challenge</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4454</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/dp2fpochwkk/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The new year brings a big change; I will be leaving the Eclipse Foundation at the end of January. This has been a difficult decision to make but it is time to take on a new challenge.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;I am extremely proud to have been part of the Eclipse Foundation and Eclipse community since the early days. I fondly remember the chaotic and exciting early years of setting up the Foundation and the explosive growth of projects, members and users. The Eclipse Foundation was one of the first open source foundations that showed how professional staff can help bring together companies and open source developers to create innovative open source communities. In some ways, the Eclipse Foundation became the template for many of the new open source foundations started in the last 5 years.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is great to be leaving when the Foundation is gaining tremendous momentum. In particular, EE4J, Eclipse Microprofile, DeepLearning4J, OpenJ9 and other projects are all showing Eclipse is becoming the place for open source enterprise Java. The Eclipse IoT working group continues to grow and is certainly the largest IoT open source community in the industry. The Foundation is definitely on a roll.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Of course I will miss the amazing people at the Foundation and in the Eclipse community. I am privileged to have worked with so many individuals from many different organizations. One of the best parts of my role is being able to learn from some of the world’s best. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is time to start looking for a new challenge. I am going to take some time to look for a new position. My passion is working with smart technologists to create and implement strategies to promote the market adoption of new technologies and solutions. Today there are some fascinating new technologies being introduced, like AI/ML, Blockchain/Distributed Ledgers, Cloud Native Computing, IoT, etc. It is an exciting time to work in the technology industry and I look forward to taking on a new challenge.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;My last day with the Eclipse Foundation will be January 26, 2018. The technology industry is very small so I hope and expect to keep in touch with many people from the Eclipse community. I will continue to be active on my blog, &lt;a href=&quot;https://twitter.com/ianskerrett&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/ianskerrett/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4454/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4454/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4454&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/dp2fpochwkk&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 04 Jan 2018 13:39:24 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: Following the Community's Lead</title>
	<guid isPermaLink="false">https://cdtdoug.ca/tag/eclipse/rss/5a4d3387a395eb05edc6c3ec</guid>
	<link>https://cdtdoug.ca/following-the-communitys-lead/</link>
	<description>&lt;div class=&quot;kg-card-markdown&quot;&gt;&lt;p&gt;I posted this tweet a couple of weeks ago and thought I'd explain it a bit more.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;2018 is going to be a defining year. Either it'll be the end and a new beginning, or it'll be a revival. Not sure I control either path other than my desire to not walk it alone.&lt;/p&gt;— Doug Schaefer (@dougschaefer) &lt;a href=&quot;https://twitter.com/dougschaefer/status/943888353564549120?ref_src=twsrc%5Etfw&quot;&gt;December 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;I wrote it shortly after posting the final bits for the CDT 9.4 release and was starting to think about my plans for 2018. And certainly the current state of Eclipse tools projects including the CDT has been weighing on my mind.&lt;/p&gt;
&lt;p&gt;When QNX started the CDT project, we embraced open source as a means of sharing in a common effort to build a great C/C++ IDE. We didn't have a huge team and we knew that many platform vendors were in a similar situation. By working together, we all benefit. And for many years it worked and we now have the embedded industry's most popular IDE that we all should be proud of.&lt;/p&gt;
&lt;p&gt;But times they are a changing. &lt;a href=&quot;https://cdtdoug.ca/looking-forward-to-2017/&quot;&gt;As I blogged last year around this time&lt;/a&gt;, web technologies are becoming the platform of choice, not just for web, &lt;a href=&quot;https://electronjs.org/&quot;&gt;but with the help of Electron&lt;/a&gt;, for the desktop as well. We can not discount the popularity of &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; and the ecosystem that has quickly developed around it. And with shared technologies like language servers, the door is being opened to choice like we've never had before.&lt;/p&gt;
&lt;p&gt;So as I was inferring from my tweet, it's time to take stock of where we are and where we are going. I was encouraged with the discussions I had at EclipseCon around the future of CDT. I've done what I can to help keep things rolling but at the end of the day the community leads the way and I need to be honest with myself and my customers and go where they go.&lt;/p&gt;
&lt;/div&gt;</description>
	<pubDate>Wed, 03 Jan 2018 21:35:22 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: The 4am Jamestown-Scotland ferry and other optimization strategies</title>
	<guid isPermaLink="false">https://medium.com/p/66365ac415ef</guid>
	<link>https://medium.com/@donraab/the-4am-jamestown-scotland-ferry-and-other-optimization-strategies-66365ac415ef?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;When performance is important, so is understanding your available options.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*BUyYy1ntHACBHXnccAHvNA.png&quot; /&gt;Shortcuts sometimes aren’t.&lt;/figure&gt;&lt;p&gt;Happy New Year!&lt;/p&gt;&lt;p&gt;I thought I would start out 2018 with a performance optimization story from 2017.&lt;/p&gt;&lt;h4&gt;Takeaways from this blog&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Java Iteration Pattern Optimization Strategies&lt;/li&gt;&lt;li&gt;A few &lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; and Java Stream Iteration Pattern options.&lt;/li&gt;&lt;li&gt;Recommendations at the end&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;A shortcut with a twist&lt;/h4&gt;&lt;p&gt;On January 2nd 2017, I sat with my family in our Honda Pilot on a pier at 3:30am for a half hour waiting for the 4am &lt;a href=&quot;http://www.virginiadot.org/travel/ferry-jamestown.asp&quot;&gt;Jamestown-Scotland ferry&lt;/a&gt; to arrive. I had come to the literal end of the road on a shortcut that wasn’t exactly as I had expected. I decided to take the shorter distance route on my car’s Nav System to avoid having to go north on Interstate 95 only then to have to go south to get to Williamsburg, Virginia. I’ve gotten stuck in bumper to bumper traffic in Virginia on Route 95 on late night rides coming back from Florida a few times before. When we got to the end of the road on our shorter route, the Nav System indicated the next turn was to get on the ferry (see picture above).&lt;/p&gt;&lt;p&gt;I was willing to take slower local roads, especially since it was early in the morning and there would be no traffic on them. We discovered too late that the path that our chosen path included a ferry ride. At this point, we only had two options. We could wait for the ferry and hope it was running, or turn around and add another 3 to 4 hours to our trip. A classic &lt;a href=&quot;https://en.wikipedia.org/wiki/Hobson%27s_choice&quot;&gt;Hobson’s Choice&lt;/a&gt;. We waited for the ferry. It turned out to be a fun experience once we parked our car on the ferry, but I would have preferred an alternative at 4am after driving 14 hours.&lt;/p&gt;&lt;h4&gt;“Two roads diverged in a wood…” — Robert Frost&lt;/h4&gt;&lt;p&gt;I certainly took the one less traveled by. I did learn a new route that I didn’t know before for getting to Williamsburg from Orlando, as well as the planning required to optimize that route with the ferry schedule.&lt;/p&gt;&lt;p&gt;What does this trip have to do with Eclipse Collections, you may ask? Well, the path I took was the &lt;strong&gt;&lt;em&gt;Serial&lt;/em&gt;&lt;/strong&gt; (one lane Colonial era roads), &lt;strong&gt;&lt;em&gt;Lazy&lt;/em&gt;&lt;/strong&gt; (ferry does the work until you get to the dock), and &lt;strong&gt;&lt;em&gt;Boxed&lt;/em&gt;&lt;/strong&gt; (your car is literally boxed in on the ferry by other cars) — just one of many options you can choose with Eclipse Collections and Java Streams.&lt;/p&gt;&lt;h4&gt;“Premature optimization is the root of all evil” — Donald Knuth&lt;/h4&gt;&lt;p&gt;Readability should be prioritized above performance when writing code. However, it helps to know what your available performance optimization options are, before you discover last minute your only option is stopping and waiting for the next ferry. You may actually be able to achieve better performance without sacrificing readability. In fact, there may be options you were unaware of previously that improve both readability and performance.&lt;/p&gt;&lt;p&gt;There is a set of Iteration Pattern Optimization Strategies that I believe all developers should become aware of so they can appropriately tune their code for the best performance.&lt;/p&gt;&lt;p&gt;Don’t guess when optimizing code. First prove you have a problem that needs to be fixed. Then benchmark any solutions you think may help to prove that they actually do.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Travelers Beware:&lt;/strong&gt; You can lose many hours of your life measuring performance optimization benefits. The tests I have run below take 45–50 minutes to run each time. I had to run them several times along with unit tests to validate that the results were the same across all similar tests. When you see the charts, you may be at first compelled by the graphs in terms of wanting to change your code to be more “optimal”. Optimal may not equate to noticeably faster in terms of your application’s overall performance. Each of these tests take at most hundreds of milliseconds to run. They are all “fast”, because they are all in memory. The optimal solutions may only accumulate savings over a large number of executions. If you happen to see a more readable solution you were not aware of here, go for that one.&lt;/p&gt;&lt;h4&gt;Iteration Pattern Optimization Strategies&lt;/h4&gt;&lt;p&gt;Do you know how to leverage all of these strategies separately and together to increase performance without sacrificing readability?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Eager&lt;/strong&gt; — executes immediately with potential optimizations specific to each algorithm and data structure. Eager algorithms are as close to a hand coded for-loop as you will get, so they are easy to understand and debug. &lt;em&gt;I prefer eager as the default option for iterating over collections. It is the simplest and usually most succinct and readable solution available. I consider every other solution a potential optimization, which may prove pre-mature.&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Primitive&lt;/strong&gt; — If you can avoid boxing primitives, you can reduce memory cost and potentially increase performance. &lt;em&gt;I always use primitive collections and algorithms when I can.&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Lazy&lt;/strong&gt; — executes only when a terminal operation is called. Optimizations include reducing the amount of memory required and total computation when multiple operation are executed. Short-circuiting effects can really help performance when run lazily. &lt;em&gt;I prefer lazy as soon as I am executing multiple operations that would result in temporary collections being created.&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Parallel&lt;/strong&gt; — It costs more to run in parallel. You need the right data size, algorithm and multiple cores. If you have all of these, you may benefit from running in parallel. &lt;em&gt;Measure it to prove it.&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Eager vs. Lazy — Understanding how they work&lt;/h4&gt;&lt;p&gt;Let’s take a list of five integers and perform a filter, map, and reduce set of operations both eagerly and lazily.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void eagerVsLazy()&lt;br /&gt;{&lt;br /&gt;    long eagerSum = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5)&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;eager select: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;eager collect: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2)&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;eager sum: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .sum();&lt;br /&gt;    System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(eagerSum);&lt;br /&gt;&lt;br /&gt;    long lazySum = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5)&lt;br /&gt;            .asLazy()&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;lazy select: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;lazy collect: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2)&lt;br /&gt;            .tap(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;lazy sum: &quot; &lt;/strong&gt;+ i))&lt;br /&gt;            .sum();&lt;br /&gt;    System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(lazySum);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(eagerSum, lazySum);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Except for the additional call to asLazy in the lazy example, the code should look identical. The printed results are as follows:&lt;/p&gt;&lt;pre&gt;eager select: 1&lt;br /&gt;eager select: 2&lt;br /&gt;eager select: 3&lt;br /&gt;eager select: 4&lt;br /&gt;eager select: 5&lt;br /&gt;eager collect: 2&lt;br /&gt;eager collect: 4&lt;br /&gt;eager sum: 4&lt;br /&gt;eager sum: 8&lt;br /&gt;12&lt;/pre&gt;&lt;pre&gt;lazy select: 1&lt;br /&gt;lazy select: 2&lt;br /&gt;lazy collect: 2&lt;br /&gt;lazy sum: 4&lt;br /&gt;lazy select: 3&lt;br /&gt;lazy select: 4&lt;br /&gt;lazy collect: 4&lt;br /&gt;lazy sum: 8&lt;br /&gt;lazy select: 5&lt;br /&gt;12&lt;/pre&gt;&lt;p&gt;Notice how the order of execution changes on the lambdas in the lazy case. In the eager case, two additional lists are created as intermediate results during the execution. A List of Integer with two Integers (2, 4) and then an IntList with two ints (4, 8) are created before the final call to sum. In the lazy case, there are no intermediate collections created. This results in less garbage being generated. This is why I prefer lazy execution when there are multiple operations involved. If there was a single operation involved, then I would default to using the eager solution.&lt;/p&gt;&lt;p&gt;If we look at the serial Stream solution, it’s execution order will be the same as the lazy Eclipse Collections solution.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void stream()&lt;br /&gt;{&lt;br /&gt;    int streamSum = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5)&lt;br /&gt;            .stream()&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream filter: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream map: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .mapToInt(i -&amp;gt; i * 2)&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream sum: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .sum();&lt;br /&gt;    System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(streamSum);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Here is the output:&lt;/p&gt;&lt;pre&gt;stream filter: 1&lt;br /&gt;stream filter: 2&lt;br /&gt;stream map: 2&lt;br /&gt;stream sum: 4&lt;br /&gt;stream filter: 3&lt;br /&gt;stream filter: 4&lt;br /&gt;stream map: 4&lt;br /&gt;stream sum: 8&lt;br /&gt;stream filter: 5&lt;br /&gt;12&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Lazy + Parallel = Harder to Follow&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using Eclipse Collections lazy parallel with a batch size of one so we can see the results for a very small list.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void parallel()&lt;br /&gt;{&lt;br /&gt;    long parallelSum = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5)&lt;br /&gt;            .&lt;strong&gt;asParallel&lt;/strong&gt;(Executors.&lt;em&gt;newWorkStealingPool&lt;/em&gt;(), &lt;strong&gt;1&lt;/strong&gt;)&lt;br /&gt;            .select(i -&amp;gt; {&lt;br /&gt;                System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;parallel select: &quot; &lt;/strong&gt;+ i);&lt;br /&gt;                return i % 2 == 0;&lt;br /&gt;            })&lt;br /&gt;            .collect(i -&amp;gt; {&lt;br /&gt;                System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;parallel collect: &quot; &lt;/strong&gt;+ i);&lt;br /&gt;                return i * 2;&lt;br /&gt;            })&lt;br /&gt;            .sumOfInt(i -&amp;gt; {&lt;br /&gt;                System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;parallel sum: &quot; &lt;/strong&gt;+ i);&lt;br /&gt;                return i;&lt;br /&gt;            });&lt;br /&gt;    System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(parallelSum);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 1:&lt;br /&gt;&lt;/strong&gt;parallel select: 2&lt;br /&gt;parallel select: 1&lt;br /&gt;parallel select: 4&lt;br /&gt;parallel collect: 4&lt;br /&gt;parallel select: 3&lt;br /&gt;sum: 8&lt;br /&gt;parallel select: 5&lt;br /&gt;parallel collect: 2&lt;br /&gt;sum: 4&lt;br /&gt;12&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 2:&lt;br /&gt;&lt;/strong&gt;parallel select: 1&lt;br /&gt;parallel select: 3&lt;br /&gt;parallel select: 2&lt;br /&gt;parallel select: 5&lt;br /&gt;parallel select: 4&lt;br /&gt;parallel collect: 2&lt;br /&gt;parallel collect: 4&lt;br /&gt;parallel sum: 4&lt;br /&gt;parallel sum: 8&lt;br /&gt;12&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 3:&lt;br /&gt;&lt;/strong&gt;parallel select: 4&lt;br /&gt;parallel select: 2&lt;br /&gt;parallel collect: 2&lt;br /&gt;parallel select: 5&lt;br /&gt;parallel select: 3&lt;br /&gt;parallel select: 1&lt;br /&gt;parallel sum: 4&lt;br /&gt;parallel collect: 4&lt;br /&gt;parallel sum: 8&lt;br /&gt;12&lt;/pre&gt;&lt;p&gt;The result is consistent between runs, but the order of execution of lambdas is not guaranteed nor consistent.&lt;/p&gt;&lt;p&gt;Using parallel Streams:&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void parallelStream()&lt;br /&gt;{&lt;br /&gt;    int streamSum = Interval.&lt;em&gt;oneTo&lt;/em&gt;(5).toList()&lt;br /&gt;            .parallelStream()&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream filter: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream map: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .mapToInt(i -&amp;gt; i * 2)&lt;br /&gt;            .peek(i -&amp;gt; System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(&lt;strong&gt;&quot;stream sum: &quot;&lt;/strong&gt;+ i))&lt;br /&gt;            .sum();&lt;br /&gt;    System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;.println(streamSum);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 1:&lt;br /&gt;&lt;/strong&gt;stream filter: 4&lt;br /&gt;stream filter: 1&lt;br /&gt;stream map: 4&lt;br /&gt;stream filter: 2&lt;br /&gt;stream sum: 8&lt;br /&gt;stream filter: 3&lt;br /&gt;stream filter: 5&lt;br /&gt;stream map: 2&lt;br /&gt;stream sum: 4&lt;br /&gt;12&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 2:&lt;br /&gt;&lt;/strong&gt;stream filter: 5&lt;br /&gt;stream filter: 1&lt;br /&gt;stream filter: 3&lt;br /&gt;stream filter: 2&lt;br /&gt;stream filter: 4&lt;br /&gt;stream map: 2&lt;br /&gt;stream map: 4&lt;br /&gt;stream sum: 4&lt;br /&gt;stream sum: 8&lt;br /&gt;12&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;Run 3:&lt;br /&gt;&lt;/strong&gt;stream filter: 2&lt;br /&gt;stream filter: 4&lt;br /&gt;stream map: 2&lt;br /&gt;stream map: 4&lt;br /&gt;stream sum: 8&lt;br /&gt;stream filter: 1&lt;br /&gt;stream filter: 3&lt;br /&gt;stream filter: 5&lt;br /&gt;stream sum: 4&lt;br /&gt;12&lt;/pre&gt;&lt;h4&gt;Measure, Execute and Repeat.&lt;/h4&gt;&lt;p&gt;I am going to show different options and their performance characteristics for a set of use cases using a million randomly generated integers stored in Lists. These are not likely to be the use cases you will encounter in production code, but they should hopefully illustrate some options you may not have been aware of next time you find a bottleneck you were not expecting in your basic Java data structures and algorithms. I will demonstrate the performance differences between using object and primitive lists, eager and lazy APIs, with both serial and parallel execution, with four different use cases.&lt;/p&gt;&lt;p&gt;In each use case, I share what I observed — expected and unexpected. I only observed. I have not dug into the why the results were what they were. “The why” perhaps is a topic for another blog.&lt;/p&gt;&lt;h4&gt;Use Cases — Filter, Map, Reduce, and Filter/Map/Reduce&lt;/h4&gt;&lt;pre&gt;1. Filter even integers into a List&lt;br /&gt;2. Multiply the integers by 2 and storing the result in a List&lt;br /&gt;3. Sum all the integers into a long&lt;br /&gt;4. Filter/Map/Reduce (Filter Evens, Multiply x 2, Sum into long)&lt;/pre&gt;&lt;h4&gt;The Data — 1,000,000 Integers&lt;/h4&gt;&lt;pre&gt;private List&amp;lt;Integer&amp;gt; jdkList;&lt;br /&gt;private MutableList&amp;lt;Integer&amp;gt; ecList;&lt;br /&gt;private IntList ecPrimitiveList;&lt;br /&gt;private ExecutorService executorService;&lt;/pre&gt;&lt;pre&gt;@Setup&lt;br /&gt;public void setup()&lt;br /&gt;{&lt;br /&gt;    PrimitiveIterator.OfInt intGenerator = &lt;br /&gt;        new Random(1L).ints(-1000, 1000).iterator();&lt;br /&gt;    this.ecList = &lt;br /&gt;        FastList.&lt;em&gt;newWithNValues&lt;/em&gt;(1_000_000, intGenerator::nextInt);&lt;br /&gt;    this.jdkList = new ArrayList&amp;lt;&amp;gt;(1_000_000);&lt;br /&gt;    this.jdkList.addAll(this.ecList);&lt;br /&gt;    this.ecPrimitiveList = &lt;br /&gt;        this.ecList.collectInt(i -&amp;gt; i, new IntArrayList(1_000_000));&lt;br /&gt;    this.executorService = Executors.&lt;em&gt;newWorkStealingPool&lt;/em&gt;();&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Hardware&lt;/h4&gt;&lt;p&gt;I will be using a MacPro with the following hardware specs to measure the benchmarks:&lt;/p&gt;&lt;pre&gt;Processor Name: 12-Core Intel Xeon E5&lt;br /&gt;Processor Speed: 2.7 GHz&lt;br /&gt;Number of Processors: 1&lt;br /&gt;Total Number of Cores: 12&lt;br /&gt;L2 Cache (per Core): 256 KB&lt;br /&gt;L3 Cache: 30 MB&lt;br /&gt;Memory: 64 GB&lt;/pre&gt;&lt;h4&gt;Software&lt;/h4&gt;&lt;p&gt;To illustrate the different options that are available for these particular use cases, I will be using JDK 1.8.0_152 with &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; and Streams.&lt;/p&gt;&lt;h4&gt;Benchmarking&lt;/h4&gt;&lt;p&gt;I am using &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;JMH&lt;/a&gt; version 1.19 as the benchmark harness for my tests. I am running 30 warmup iterations, and 20 measurement iterations with 2 forks. I am using Mode.Throughput with the tests so they are easy to read. The numbers are in Operations per Second. &lt;em&gt;The bigger the number, the better the result.&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;public static void main(String[] args) throws RunnerException&lt;br /&gt;{&lt;br /&gt;    Options options = new OptionsBuilder()&lt;br /&gt;        .include(&lt;strong&gt;&quot;.*&quot; &lt;/strong&gt;+ IntListJMHTest.class.getSimpleName() + &lt;strong&gt;&quot;.*&quot;&lt;/strong&gt;)&lt;br /&gt;            .forks(2)&lt;br /&gt;            .mode(Mode.&lt;strong&gt;&lt;em&gt;Throughput&lt;/em&gt;&lt;/strong&gt;)&lt;br /&gt;            .timeUnit(TimeUnit.&lt;strong&gt;&lt;em&gt;SECONDS&lt;/em&gt;&lt;/strong&gt;)&lt;br /&gt;            .warmupIterations(30)&lt;br /&gt;            .build();&lt;br /&gt;    new Runner(options).run();&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;I will highlight in &lt;strong&gt;&lt;em&gt;dark green&lt;/em&gt;&lt;/strong&gt; the best overall result in the run. I will highlight in &lt;strong&gt;&lt;em&gt;light green&lt;/em&gt;&lt;/strong&gt; the best serial execution result. Where I use EC in a label in the chart it stands for a solution using Eclipse Collections. Where I used JDK, the solution uses a standard JDK approach.&lt;/p&gt;&lt;h4&gt;Filter even integers&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/752/1*E_rVn4mHtKIJs78KDP6dzg.png&quot; /&gt;Filter even numbers from a List of 1,000,000 Integers&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Expected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I expected ECParallelEager to perform better.&lt;/li&gt;&lt;li&gt;I expected primitive collections to outperform boxed collections.&lt;/li&gt;&lt;li&gt;I expected serial eager to outperform serial lazy.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Unexpected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I did not expect parallel streams to perform this poorly.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;filterECBoxedEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList.select(i -&amp;gt; i % 2 == 0);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;filterECBoxedLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;filterECParallelEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return ParallelIterate.&lt;em&gt;select&lt;/em&gt;(&lt;br /&gt;            this.ecList,&lt;br /&gt;            i -&amp;gt; i % 2 == 0,&lt;br /&gt;            new CompositeFastList&amp;lt;&amp;gt;(),&lt;br /&gt;            false);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;filterECParallelLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asParallel(this.executorService, 50_000)&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public IntList &lt;strong&gt;filterECPrimitiveEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList.select(i -&amp;gt; i % 2 == 0);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public IntList &lt;strong&gt;filterECPrimitiveLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public List&amp;lt;Integer&amp;gt; &lt;strong&gt;filterJDKBoxedParallelStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .parallelStream()&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .collect(Collectors.&lt;em&gt;toList&lt;/em&gt;());&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public List&amp;lt;Integer&amp;gt; &lt;strong&gt;filterJDKBoxedStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .stream()&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .collect(Collectors.&lt;em&gt;toList&lt;/em&gt;());&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Map each integer x 2&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/752/1*2Z3CRHb8BnOhPdp2akeBug.png&quot; /&gt;Multiply times two, each integer in a List of 1,000,000 Integers&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Expected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I expected primitive collections to outperform boxed collections.&lt;/li&gt;&lt;li&gt;I expected serial eager to outperform serial lazy.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Unexpected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I did not expected ECParallelLazy to perform so poorly.&lt;/li&gt;&lt;li&gt;I did not expect either Stream solutions to perform so poorly.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;mapECBoxedEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList.collect(i -&amp;gt; i * 2);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;mapECBoxedLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .collect(i -&amp;gt; i * 2)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;mapECParallelEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return ParallelIterate.&lt;em&gt;collect&lt;/em&gt;(&lt;br /&gt;            this.ecList, i -&amp;gt; i * 2,&lt;br /&gt;            new CompositeFastList&amp;lt;&amp;gt;(),&lt;br /&gt;            false);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public MutableList&amp;lt;Integer&amp;gt; &lt;strong&gt;mapECParallelLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asParallel(this.executorService, 50_000)&lt;br /&gt;            .collect(i -&amp;gt; i * 2)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public IntList &lt;strong&gt;mapECPrimitiveEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2, IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty());&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public IntList &lt;strong&gt;mapECPrimitiveLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2)&lt;br /&gt;            .toList();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public List&amp;lt;Integer&amp;gt; &lt;strong&gt;mapJDKBoxedParallelStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .parallelStream()&lt;br /&gt;            .mapToInt(i -&amp;gt; i * 2)&lt;br /&gt;            .boxed()&lt;br /&gt;            .collect(Collectors.&lt;em&gt;toList&lt;/em&gt;());&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public List&amp;lt;Integer&amp;gt; mapJDKBoxedStream()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .stream()&lt;br /&gt;            .mapToInt(i -&amp;gt; i * 2)&lt;br /&gt;            .boxed()&lt;br /&gt;            .collect(Collectors.&lt;em&gt;toList&lt;/em&gt;());&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Sum all integers&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/752/1*gSrwPZqSVOUDp_pFMM0Okg.png&quot; /&gt;Sum 1,000,000 Integers&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Expected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I expected primitive collections to outperform boxed collections.&lt;/li&gt;&lt;li&gt;I expected little benefit from parallelization here. Summing ints is a very fast operation. I expected eager primitive to be faster than most of the parallel options.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Unexpected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I did not expect serial streams to get crushed. There seems to have been an improvement made in Java 9. I ran the benchmarks again with Java 9 and this particular benchmark improved by ~7–8x.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECBoxedEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList.sumOfInt(Integer::intValue);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECBoxedLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .sumOfInt(Integer::intValue);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECParallelEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return ParallelIterate.&lt;em&gt;sumByInt&lt;/em&gt;(&lt;br /&gt;            this.ecList,&lt;br /&gt;            i -&amp;gt; Integer.&lt;em&gt;valueOf&lt;/em&gt;(0),&lt;br /&gt;            Integer::intValue).get(0);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECParallelLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asParallel(this.executorService, 50_000)&lt;br /&gt;            .sumOfInt(Integer::intValue);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECPrimitiveEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList.sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumECPrimitiveLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumJDKBoxedParallelStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .parallelStream()&lt;br /&gt;            .mapToLong(Integer::longValue)&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;sumJDKBoxedStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .stream()&lt;br /&gt;            .mapToLong(Integer::longValue)&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Filter, Map, Sum&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/752/1*X9IwHMNWscNvELlnvoU1qg.png&quot; /&gt;Filter even integers, multiply remaining x 2 and return their sum&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Expected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I expected lazy operations to outperform eager.&lt;/li&gt;&lt;li&gt;I expected primitive lazy would outperform all of the other serial operations.&lt;/li&gt;&lt;li&gt;I expected JDKBoxedParallelStream would perform well with this use case.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Unexpected:&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I did not expect ECParallelEager to do as well as or better than ECParallelLazy, even though it was optimized.&lt;/li&gt;&lt;li&gt;I did not expect JDKBoxedParallelStream to do better than ECParallelLazy.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECBoxedEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .sumOfInt(i -&amp;gt; i * 2);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECBoxedLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .sumOfInt(i -&amp;gt; i * 2);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECOptimizedParallelEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return ParallelIterate.&lt;em&gt;sumByInt&lt;/em&gt;(&lt;br /&gt;            this.ecList,&lt;br /&gt;            i -&amp;gt; i % 2,&lt;br /&gt;            i -&amp;gt; i * 2).get(0);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECOptimizedParallelLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asParallel(this.executorService, 50_000)&lt;br /&gt;            .sumOfInt(i -&amp;gt; i % 2 == 0 ? i * 2 : 0);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECParallelLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecList&lt;br /&gt;            .asParallel(this.executorService, 50_000)&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .sumOfInt(i -&amp;gt; i * 2);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECPrimitiveEager&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2, IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty())&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumECPrimitiveLazy&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.ecPrimitiveList&lt;br /&gt;            .asLazy()&lt;br /&gt;            .select(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .collectInt(i -&amp;gt; i * 2)&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumJDKBoxedParallelStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .parallelStream()&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .mapToLong(i -&amp;gt; (long) (i * 2))&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public long &lt;strong&gt;filterMapSumJDKBoxedStream&lt;/strong&gt;()&lt;br /&gt;{&lt;br /&gt;    return this.jdkList&lt;br /&gt;            .stream()&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .mapToLong(i -&amp;gt; (long) (i * 2))&lt;br /&gt;            .sum();&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Congratulations!&lt;/h4&gt;&lt;p&gt;I hope you enjoyed the blog and learned some new things about Iteration Pattern Options and Optimization Strategies using Eclipse Collections and Java Streams. If your only tool is a hammer, everything else is a nail. Knowing your available options before you get started on your journey and adapting as needs arise is one of the keys to writing better and more responsive applications. This can also help you execute a less stressful trip from Orlando to Williamsburg, if ever that occasion happens to arise.&lt;/p&gt;&lt;h4&gt;Recommendations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Prefer Primitives over Boxing.&lt;/li&gt;&lt;li&gt;Prefer Eager iteration for single or fused operations.&lt;/li&gt;&lt;li&gt;Prefer Lazy iteration for multi-step operations.&lt;/li&gt;&lt;li&gt;Prove it before going Parallel.&lt;/li&gt;&lt;li&gt;Try &lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; if you want more than &lt;a href=&quot;https://en.wikipedia.org/wiki/Hobson%27s_choice&quot;&gt;Hobson’s Choice&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=66365ac415ef&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 03 Jan 2018 05:16:00 +0000</pubDate>
</item>
<item>
	<title>Lorenzo Bettini: Analyzing Eclipse plug-in projects with Sonarqube</title>
	<guid isPermaLink="false">http://www.lorenzobettini.it/?p=1013</guid>
	<link>http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/</link>
	<description>&lt;p&gt;In this tutorial I’m going to show how to analyze multiple Eclipse plug-in projects with Sonarqube. In particular, I’m going to focus on peculiarities that have to be taken care of due to the standard way Sonarqube analyzes sources and to the structure of typical Eclipse plug-in projects (concerning tests and code coverage).&lt;/p&gt;
&lt;p&gt;The code of this example is available on Github: &lt;a href=&quot;https://github.com/LorenzoBettini/tycho-sonarqube-example&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://github.com/LorenzoBettini/tycho-sonarqube-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This can be seen as a follow-up of &lt;a href=&quot;http://www.lorenzobettini.it/2017/02/jacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects/&quot;&gt;my previous post on “Jacoco code coverage and report of multiple Eclipse plug-in projects&lt;/a&gt;. I’ll basically reuse almost the same structure of that example and a few things. The part of Jacoco report is not related to Sonarqube but I’ll leave it there.&lt;/p&gt;
&lt;p&gt;The structure of the projects is as follows:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-project-structure/&quot; rel=&quot;attachment wp-att-1017&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1017&quot; height=&quot;415&quot; src=&quot;https://i2.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-project-structure.png?resize=435%2C415&quot; width=&quot;435&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Each project’s code is tested in a specific .tests project. The code consists of simple Java classes doing nothing interesting, and tests just call that code.&lt;/p&gt;
&lt;p&gt;The project &lt;strong&gt;example.tests.parent&lt;/strong&gt; contains all the common configurations for test projects (and test report, please refer to &lt;a href=&quot;http://www.lorenzobettini.it/2017/02/jacoco-code-coverage-and-report-of-multiple-eclipse-plug-in-projects/&quot;&gt;my previous post on “Jacoco code coverage and report of multiple Eclipse plug-in projects&lt;/a&gt; for the details of this report project, which is not strictly required for Sonarqube).&lt;/p&gt;
&lt;p&gt;This is its pom&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
  &amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;example&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;example.parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
  &amp;lt;/parent&amp;gt;

  &amp;lt;artifactId&amp;gt;example.tests.parent&amp;lt;/artifactId&amp;gt;
  &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;

  &amp;lt;properties&amp;gt;
    &amp;lt;!-- this will be overridden in jacoco profile with tycho.testArgLine, 
      which, in turn, will be set by Jacoco prepare-agent goal. This property can 
      then be used in argLine for custom tycho-surefire configuration, both when 
      Jacoco is used and when it is not used. --&amp;gt;
    &amp;lt;additionalTestArgLine&amp;gt;&amp;lt;/additionalTestArgLine&amp;gt;
    &amp;lt;jacoco-version&amp;gt;0.7.9&amp;lt;/jacoco-version&amp;gt;
  &amp;lt;/properties&amp;gt;

  &amp;lt;profiles&amp;gt;
    &amp;lt;profile&amp;gt;
      &amp;lt;id&amp;gt;jacoco&amp;lt;/id&amp;gt;
      &amp;lt;activation&amp;gt;
        &amp;lt;activeByDefault&amp;gt;false&amp;lt;/activeByDefault&amp;gt;
      &amp;lt;/activation&amp;gt;
      &amp;lt;properties&amp;gt;
        &amp;lt;!-- This will be set by Jacoco prepare-agent goal --&amp;gt;
        &amp;lt;additionalTestArgLine&amp;gt;${tycho.testArgLine}&amp;lt;/additionalTestArgLine&amp;gt;
      &amp;lt;/properties&amp;gt;
      &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
          &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.jacoco&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jacoco-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${jacoco-version}&amp;lt;/version&amp;gt;
            &amp;lt;configuration&amp;gt;
              &amp;lt;excludes&amp;gt;
                &amp;lt;exclude&amp;gt;**/plugin1/Main.class&amp;lt;/exclude&amp;gt;
              &amp;lt;/excludes&amp;gt;
            &amp;lt;/configuration&amp;gt;
            &amp;lt;executions&amp;gt;
              &amp;lt;execution&amp;gt;
                &amp;lt;goals&amp;gt;
                  &amp;lt;goal&amp;gt;prepare-agent&amp;lt;/goal&amp;gt;
                &amp;lt;/goals&amp;gt;
              &amp;lt;/execution&amp;gt;
            &amp;lt;/executions&amp;gt;
          &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
      &amp;lt;/build&amp;gt;
    &amp;lt;/profile&amp;gt;
  &amp;lt;/profiles&amp;gt;

&amp;lt;/project&amp;gt;&lt;/pre&gt;&lt;p&gt;Note that this also shows a possible way of dealing with custom argLine for tycho-surefire configuration: &lt;strong&gt;tycho.testArgLine&lt;/strong&gt; will be automatically set the &lt;strong&gt;jacoco:prepare-agent&lt;/strong&gt; goal, with the path of jacoco agent (needed for code coverage); the property tycho.testArgLine is &lt;strong&gt;automatically used by tycho-surefire&lt;/strong&gt;. But if you have a custom configuration of tycho-surefire with additional arguments you want to pass in argLine, you must be careful not to overwrite the value set by jacoco. If you simply refer to tycho.testArgLine in the custom tycho-surefire configuration’s argLine, it will work when the jacoco profile is active but it will fail when it is not active since that property will not exist. Don’t try to define it as an empty property by default, since when tycho-surefire runs it will use that empty value, ignoring the one set by jacoco:prepare-agent (argLine’s properties are resolved before jacoco:prepare-agent is executed). Instead, &lt;strong&gt;use another level of indirection&lt;/strong&gt;: refer to a new property, e.g., &lt;strong&gt;additionalTestArgLine&lt;/strong&gt;, which by default is empty. In the jacoco profile, set additionalTestArgLine referring to tycho.testArgLine (in that profile, that property is surely set by jacoco:prepare-agent). Then, in the custom argLine, refer to additionalTestArgLine. An example is shown in the project &lt;strong&gt;example.plugin2.tests&lt;/strong&gt; pom:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
  &amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;example&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;example.tests.parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;relativePath&amp;gt;../example.tests.parent&amp;lt;/relativePath&amp;gt;
  &amp;lt;/parent&amp;gt;

  &amp;lt;artifactId&amp;gt;example.plugin2.tests&amp;lt;/artifactId&amp;gt;
  &amp;lt;packaging&amp;gt;eclipse-test-plugin&amp;lt;/packaging&amp;gt;

  &amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
      &amp;lt;plugin&amp;gt;
        &amp;lt;groupId&amp;gt;org.eclipse.tycho&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;tycho-surefire-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${tycho-version}&amp;lt;/version&amp;gt;
        &amp;lt;configuration&amp;gt;
          &amp;lt;!-- additionalTestArgLine is set in the parent project with the 
            Jacoco agent when the jacoco profile is active (and it will be empty when 
            jacoco profile is not active). This way, you can customize argLine without 
            overwriting the jacoco agent set by jacoco:prepare-agent. --&amp;gt;
          &amp;lt;argLine&amp;gt;${additionalTestArgLine} -DbuildingWithTycho=true&amp;lt;/argLine&amp;gt;
        &amp;lt;/configuration&amp;gt;
      &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
  &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;&lt;/pre&gt;&lt;p&gt;You can check that code coverage works as expected by running (it’s important to verify that jacoco has been configured correctly in your projects before running Sonarqube analysis: if it’s not working in Sonarqube then it’s something wrong in the configuration for Sonarqube, not in the jacoco configuration, as we’ll see in a minute):&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;mvn clean verify -Pjacoco&lt;/pre&gt;&lt;p&gt;Mare sure that &lt;strong&gt;example.tests.report/target/site/jacoco-aggregate/index.html&lt;/strong&gt; reports some code coverage (in this example, example.plugin1 has some code uncovered by intention).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now I assume you already have Sonarqube installed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let’s run a first Sonarqube analysis with&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;mvn clean verify -Pjacoco sonar:sonar&lt;/pre&gt;&lt;p&gt;This is the result:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis1/&quot; rel=&quot;attachment wp-att-1021&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1021&quot; height=&quot;289&quot; src=&quot;https://i1.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis1.png?resize=625%2C289&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So &lt;strong&gt;Unit Tests are correctly collected&lt;/strong&gt;! What about Code Coverage? Something is shown, but if you click on that you see some bad surprises:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis2/&quot; rel=&quot;attachment wp-att-1023&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1023&quot; height=&quot;239&quot; src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis2.png?resize=625%2C239&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code coverage only on tests (which is irrelevant) and no coverage for our SUT (Software Under Test) classes!&lt;/p&gt;
&lt;p&gt;That’s because jacoco .exec files are by default generated in the target folder of the tests project, now when Sonarqube analyzes the projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it finds the jacoco.exec file when it analyzes a tests project but can only see the sources of the tests project (not the ones of the SUT)&lt;/li&gt;
&lt;li&gt;when it analyzes a SUT project it cannot find any jacoco.exec file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We could fix this by configuring the maven jacoco plugin to generate jacoco.exec in the SUT project, but then the aggregate report configuration should be updated accordingly (while it works out of the box with the defaults). Another way of fixing the problem is to use the Sonarqube maven property &lt;strong&gt;sonar.jacoco.reportPaths&lt;/strong&gt; and “trick” Sonarqube like that (we do that in the parent pom properties section):&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;!-- Always refer to the corresponding tests project (if it exists) otherwise 
      Sonarqube won't be able to collect code coverage. For example, when analyzing 
      project foo it wouldn't find code coverage information if it doesn't use 
      foo.tests jacoco.exec. --&amp;gt;
    &amp;lt;sonar.jacoco.reportPaths&amp;gt;
      ../${project.artifactId}.tests/target/jacoco.exec
    &amp;lt;/sonar.jacoco.reportPaths&amp;gt;&lt;/pre&gt;&lt;p&gt;This way, when it analyzes example.plugin1 it will use the jacoco.exec found in example.plugin1.tests project (if you follow the convention foo and foo.tests this works out of the box, otherwise, you have to list all the jacoco.exec paths in all the projects in that property, separated by comma).&lt;/p&gt;
&lt;p&gt;Let’s run the analysis again:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis3/&quot; rel=&quot;attachment wp-att-1025&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1025&quot; height=&quot;246&quot; src=&quot;https://i1.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis3.png?resize=625%2C246&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OK, now code coverage is collected on the SUT classes as we wanted. Of course, now test classes appear as uncovered (remember, when it analyzes example.plugin1.tests it now searchs for jacoco.exec in example.plugin1.tests.tests, which does not even exist).&lt;/p&gt;
&lt;p&gt;This leads us to another problem: test classes should be excluded from Sonarqube analysis. This works out of the box in standard Maven projects because source folders of SUT and source folders of test classes are separate and in the same project (that’s also why code coverage for pure Maven projects works out of the box in Sonarqube); this is not the case for Eclipse projects, where SUT and tests are in separate projects.&lt;/p&gt;
&lt;p&gt;In fact, issues are reported also on test classes:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis4/&quot; rel=&quot;attachment wp-att-1026&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1026&quot; height=&quot;284&quot; src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis4.png?resize=625%2C284&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can fix both problems by putting in the &lt;strong&gt;tests.parent pom properties&lt;/strong&gt; these two Sonarqube properties (note the link to the Eclipse bug about this behavior)&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;!-- Workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=397015 --&amp;gt;
    &amp;lt;sonar.sources&amp;gt;&amp;lt;/sonar.sources&amp;gt;
    &amp;lt;sonar.tests&amp;gt;src&amp;lt;/sonar.tests&amp;gt;&lt;/pre&gt;&lt;p&gt;This will be inherited by our tests projects and for those projects, Sonarqube will not analyze test classes.&lt;/p&gt;
&lt;p&gt;Run the analysis again and see the results: code coverage only on SUT and issues only on SUT (remember that in this example MyClass1 is not uncovered completely by intention):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis5/&quot; rel=&quot;attachment wp-att-1027&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1027&quot; height=&quot;188&quot; src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis5.png?resize=625%2C188&quot; width=&quot;625&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis6/&quot; rel=&quot;attachment wp-att-1028&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1028&quot; height=&quot;222&quot; src=&quot;https://i1.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis6.png?resize=625%2C222&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might be tempted to use the property sonar.skip set to true for test projects, but you will use JUnit test reports collection.&lt;/p&gt;
&lt;p&gt;The final bit of customization is to exclude the Main.java class from code coverage. We have already configured the jacoco maven plugin to do so, but this won’t be picked up by Sonarqube (that configuration only tells jacoco to skip that class when it generates the HTML report).&lt;/p&gt;
&lt;p&gt;We have to repeat that exclusion with a Sonarqube maven property, in the parent pom:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;!-- Example of skipping code coverage (comma separated Java files). --&amp;gt;
    &amp;lt;sonar.coverage.exclusions&amp;gt;
      **/plugin1/Main.java
    &amp;lt;/sonar.coverage.exclusions&amp;gt;&lt;/pre&gt;&lt;p&gt;Note that in the jacoco maven configuration we had excluded a .class file, while here we exclude Java files.&lt;/p&gt;
&lt;p&gt;Run the analysis again and Main is not considered in code coverage:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/01/analyzing-eclipse-plug-in-projects-with-sonarqube/tycho-sonarqube-analysis7/&quot; rel=&quot;attachment wp-att-1030&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1030&quot; height=&quot;166&quot; src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/01/tycho-sonarqube-analysis7.png?resize=625%2C166&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can have fun in fixing Sonarqube issues, which is out of the scope of this tutorial &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.3/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This example is also analyzed from Travis using Sonarcloud (&lt;a href=&quot;https://sonarcloud.io/dashboard?id=example%3Aexample.parent&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://sonarcloud.io/dashboard?id=example%3Aexample.parent&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Hope you enjoyed this tutorial and Happy new year! &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.3/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;div class=&quot;sociable&quot;&gt;&lt;div class=&quot;sociable_tagline&quot;&gt;Be Sociable, Share!&lt;/div&gt;&lt;ul class=&quot;clearfix&quot;&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://twitter.com/intent/tweet?text=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube%20-%20http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Twitter&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.facebook.com/share.php?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;t=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;https://mail.google.com/mail/?view=cm&amp;amp;fs=1&amp;amp;to&amp;amp;su=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;body=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;ui=2&amp;amp;tf=1&amp;amp;shva=1&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;email&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; rel=&quot;nofollow&quot; title=&quot;Add to favorites - doesn't work in Chrome&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;StumbleUpon&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://delicious.com/post?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;notes=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Delicious&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.google.com/reader/link?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;srcURL=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;srcTitle=Lorenzo+Bettini+My+Home+Page&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Google Reader&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;source=Lorenzo+Bettini+My+Home+Page&amp;amp;summary=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;LinkedIn&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.blinklist.com/index.php?Action=Blink/addblink.php&amp;amp;Url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;Title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; style=&quot;background-position: 0px 0px;&quot; target=&quot;_blank&quot; title=&quot;BlinkList&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a rel=&quot;nofollow&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;img src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/plugins/sociable/images/more.png?w=625&quot; /&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div id=&quot;sociable-post-1013&quot; style=&quot;display: none;&quot;&gt;   

    &lt;div id=&quot;sociable&quot; style=&quot;display: block;&quot;&gt;



		&lt;div class=&quot;popup&quot;&gt;

			&lt;div class=&quot;content&quot;&gt;

				&lt;ul&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.myspace.com/Modules/PostTo/Pages/?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;t=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Myspace&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://digg.com/submit?phase=2&amp;amp;url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;bodytext=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Digg&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://reddit.com/submit?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Reddit&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.google.com/bookmarks/mark?op=edit&amp;amp;bkmk=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;annotation=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Google Bookmarks&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://news.ycombinator.com/submitlink?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;t=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;HackerNews&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://reporter.es.msn.com/?fn=contribute&amp;amp;Title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;URL=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;cat_id=6&amp;amp;tag_id=31&amp;amp;Remark=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;MSNReporter&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://sphinn.com/index.php?c=post&amp;amp;m=submit&amp;amp;link=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Sphinn&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://posterous.com/share?linkto=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;title=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;selection=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Posterous&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.tumblr.com/share?v=3&amp;amp;u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F01%2Fanalyzing-eclipse-plug-in-projects-with-sonarqube%2F&amp;amp;t=Analyzing%20Eclipse%20plug-in%20projects%20with%20Sonarqube&amp;amp;s=In%20this%20tutorial%20I%27m%20going%20to%20show%20how%20to%20analyze%20multiple%20Eclipse%20plug-in%20projects%20with%20Sonarqube.%20In%20particular%2C%20I%27m%20going%20to%20focus%20on%20peculiarities%20that%20have%20to%20be%20taken%20care%20of%20due%20to%20the%20standard%20way%20Sonarqube%20analyzes%20sources%20and%20to%20the%20structu&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Tumblr&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;			

			&lt;/div&gt;        

		  &lt;a class=&quot;close&quot; style=&quot;cursor: pointer;&quot;&gt;

		  &lt;img src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/plugins/sociable/images/closelabel.png?w=625&quot; title=&quot;close&quot; /&gt;

		  &lt;/a&gt;

		&lt;/div&gt;

	&lt;/div&gt; 

  &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;sociable&quot; style=&quot;float: none;&quot;&gt;&lt;ul class=&quot;clearfix&quot;&gt;&lt;li id=&quot;Twitter_Counter&quot;&gt;&lt;a class=&quot;twitter-share-button&quot; href=&quot;https://twitter.com/share&quot;&gt;Tweet&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;Facebook_Counter&quot;&gt;&lt;/li&gt;&lt;li id=&quot;Google_p&quot;&gt;&lt;/li&gt;&lt;li id=&quot;LinkedIn_Counter&quot;&gt;&lt;/li&gt;&lt;li id=&quot;StumbleUpon_Counter&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 02 Jan 2018 10:16:33 +0000</pubDate>
</item>
<item>
	<title>Nikhil Nanivadekar: In Review — 2017</title>
	<guid isPermaLink="false">https://medium.com/p/de974766b753</guid>
	<link>https://medium.com/@nikhilnanivadekar/in-review-2017-de974766b753?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*4DwxX57Nb3FaR3GOn3Q9Hg.jpeg&quot; /&gt;Sunset on Miyajima (Dusk of 2017)&lt;/figure&gt;&lt;p&gt;As the sun is about to set for 2017, I but can’t help reflect what an amazing year 2017 has been! For me personally 2017 was a year of many “firsts”. I have summarized few of the many awesome experiences I had in 2017.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Experiencing the Land of the Rising Sun:&lt;/strong&gt; In February I visited Japan and was awestruck by the beauty, heritage, friendliness, hospitality, cleanliness and most importantly the delicious food. I do not speak Japanese, and at first I was a bit apprehensive of how the visit will turn out. Few of my Japanese friends taught me some important phrases and I ventured ahead. I am happy to say, it was an experience of the lifetime. The people in Japan were very friendly and accommodating. I tried to converse with them in a mixture of English, Hindi, Marathi, sign-language and most importantly tried hard to learn new bits and pieces of Japanese. One of the humbling experiences was in Hiroshima when I was trying to get to Miyajima. I got on the wrong bus and ended up at a completely different train station. Patiently the bus driver explained the route to me with just numbers and sign-language and I reached the ferry to Miyajima without any further issues. This was my first visit to Japan but definitely &lt;em&gt;not &lt;/em&gt;the last one!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Devoxx US:&lt;/strong&gt; In March I was one of the speakers at &lt;a href=&quot;https://devoxx.us/&quot;&gt;Devoxx US&lt;/a&gt;. The conference was filled with rich content, amazing speakers and gave numerous opportunities to network, share ideas and concepts. I co-presented &lt;a href=&quot;https://youtu.be/hWwbPguayNA&quot;&gt;Collections.compare&lt;/a&gt; and &lt;a href=&quot;https://youtu.be/nlRhL892hXw&quot;&gt;Robots for the Kid in Us&lt;/a&gt; talks. I was also one of the conductors for Devoxx4Kids workshop which took place before Devoxx. This was my first Devoxx experience and I enjoyed it a lot. I hope to have the opportunity to present at many more Devoxx-es in the future.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Eclipse Collections Project Lead:&lt;/strong&gt; In April, I was handed over the reins of &lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; and made the &lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections/who&quot;&gt;active project lead&lt;/a&gt;. I have been a contributor to the framework for more than 2 years and it was an amazing feeling to be recognized as a project lead. I worked hard to continue the legacy of successful project leads like Hiroshi, Craig and Don. This year we designed the official Eclipse Collections project &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/artwork/eclipse-collections-logo.png&quot;&gt;logo&lt;/a&gt;, released &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/9.0.0&quot;&gt;9.0.0&lt;/a&gt; major version which works fine with JDK 9, presented Eclipse Collections via numerous &lt;a href=&quot;https://twitter.com/TheDonRaab/status/946876656479801344&quot;&gt;avenues&lt;/a&gt;. I have highlighted my experience leading Eclipse Collections in this &lt;a href=&quot;https://medium.com/@nikhilnanivadekar/leading-eclipse-collections-my-6-month-story-3dcb71bf76d6&quot;&gt;blog&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;GIDS 2017&lt;/strong&gt;: In April, I traveled to India, my homeland and presented at the &lt;a href=&quot;http://www.developermarch.com/developersummit/&quot;&gt;Great Indian Developer Summit&lt;/a&gt; (GIDS 2017). This was my first time at GIDS and I will highly recommend developers to participate in GIDS as a speaker or as an attendee. The conference organizers do a phenomenal job putting the event together. They take good care of not just the attendees but also the speakers. The 4-day event was sold out with standing room only for pretty much all presentations. Looking forward to continued participation at GIDS.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;JavaOne:&lt;/strong&gt; In September, I was happy to be a part of the &lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=nanivadekar&amp;amp;showEnrolled=false&quot;&gt;speaker lineup&lt;/a&gt; for JavaOne and JavaOne4Kids. This was my third JavaOne (second as a speaker) and like every year it was an amazing week. I was delighted to reconnect with many friends, Java Gurus, developer advocates, awesome people from the community. I learnt a lot of new things with the main theme being JDK 9, advancing Eclipse Collections and open source participation. I also planned my UK, Ireland JUG tour during the tail end of JavaOne. JavaOne was definitely one the highlights of my year.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;UK, Ireland JUG tour:&lt;/strong&gt; As the year drew to an end, I visited UK, Ireland in November. I presented at various Java User Groups during my visit. In summer, I had visited Manchester and met one of my good friends Nick. Nick is also one of the organizers of Manchester Java Community (MJC) and floated the idea of me returning to Manchester to present at an MJC event. This was really the beginning of the tour planning. It was an amazing experience to travel to London, Belfast, Dublin, Edinburgh, Manchester, Birmingham and meet with the Java community and have a ton of amazing discussions. I have written my tour experience on this &lt;a href=&quot;https://medium.com/@nikhilnanivadekar/november-java-user-group-tour-2017-dbb103b80532&quot;&gt;blog&lt;/a&gt;. I would definitely want to do a similar tour again.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Wrap it up in India:&lt;/strong&gt; I decided what other better way to end an awesome year than to visit family and take a break for a couple of weeks. 2017 was definitely a year of many firsts, I hope to continue the streak in 2018 and wish that it is much more positively eventful with many firsts and seconds.&lt;/p&gt;&lt;p&gt;I would like to thank each and every one who was a part of my 2017 and hoping to create even more awesome memories in 2018.&lt;/p&gt;&lt;p&gt;Wishing everyone a Happy, Healthy and Safe New Year!&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*OlY4d20oAocaLPfK_J6dqg.jpeg&quot; /&gt;Sunrise on Crete (Dawn of 2018)&lt;/figure&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=de974766b753&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 31 Dec 2017 15:30:47 +0000</pubDate>
</item>
<item>
	<title>Fabian Steeg: Java annotation processing in Eclipse</title>
	<guid isPermaLink="true">http://fsteeg.com/notes/java-annotation-processing-in-eclipse</guid>
	<link>http://fsteeg.com/notes/java-annotation-processing-in-eclipse</link>
	<description>&lt;p&gt;Java annotations provide metadata for Java code. Many developers use annotations provided by standard Java APIs (like &lt;code&gt;@Override&lt;/code&gt;) or by frameworks (like &lt;code&gt;@Test&lt;/code&gt;). Developers can define their own annotations and process them at runtime using reflection. Additionally, Java provides APIs for writing custom annotation processors that can process these annotations at compile time.&lt;/p&gt;&lt;p&gt;Eclipse provides support for hooking these processors into the compilation process. So when you edit code with these annotations, the processor can analyse the source files, do stuff, and report information back to you.&lt;/p&gt;&lt;p&gt;To give you an idea about how that works, I’ll use Contracts for Java as an example, a tool that implements &lt;a href=&quot;https://github.com/nhatminhle/cofoja#usage&quot;&gt;a contract model similar to that of Eiffel&lt;/a&gt; in Java, based on annotations. For our setup, we’ll need Eclipse 4.7 (Oxygen, the 2017 release) or later.&lt;/p&gt;&lt;p&gt;To use Contracts for Java, create a Java project, and add &lt;a href=&quot;https://github.com/nhatminhle/cofoja/releases&quot;&gt;the latest release&lt;/a&gt; to the build path:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Java project&quot; src=&quot;http://fsteeg.com/images/jdt-apt-1.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;Then add some code that uses contract annotations (copy and paste the code below into the src folder of your project):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import com.google.java.contract.Ensures;
import com.google.java.contract.Requires;
 
public class Contracts {
    public static void main(String[] args) {
        System.out.println(new Numbers().add(-10, 5));
    }
}
 
class Numbers {
    @Requires({ &quot;c &amp;gt; 0&quot;, &quot;b &amp;gt; 0&quot; })
    @Ensures({ &quot;result &amp;gt; a&quot;, &quot;result &amp;gt; b&quot; })
    int add(int a, int b) {
        return a - b;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, the project should not report any issues. Normal compilation of the Java source file works just fine. Our processor is not enabled for our annotations yet. To configure the annotation processing we go to Project &amp;gt; Properties &amp;gt; Java Compiler &amp;gt; Annotation Processing.&lt;/p&gt;&lt;p&gt;Select &lt;em&gt;Enable project specific settings&lt;/em&gt; and add the following options that we want to pass to the annotation processor: set &lt;code&gt;com.google.java.contract.classpath&lt;/code&gt; to &lt;code&gt;%classpath%&lt;/code&gt; and &lt;code&gt;com.google.java.contract.classoutput&lt;/code&gt; to &lt;code&gt;%PROJECT.DIR%/.apt_generated&lt;/code&gt; (the location of your project’s generated source directory):&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Project &amp;amp;gt; Properties &amp;amp;gt; Java Compiler &amp;amp;gt; Annotation Processing&quot; src=&quot;http://fsteeg.com/images/jdt-apt-2.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;These properties are used by the processor to compile the annotated files, and to create output files. The &lt;code&gt;%classpath%&lt;/code&gt; placeholder is replaced with your Java project’s build path by Eclipse, so that the annotation processor can access all the libraries used in your project when compiling your code. The &lt;code&gt;%PROJECT.DIR%&lt;/code&gt; placeholder is replaced with the path to your Java project.&lt;/p&gt;&lt;p&gt;Finally we add the processor Jar to Project &amp;gt; Properties &amp;gt; Java Compiler &amp;gt; Annotation Processing &amp;gt; Factory Path:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Project &amp;amp;gt; Properties &amp;amp;gt; Java Compiler &amp;amp;gt; Annotation Processing &amp;amp;gt; Factory Path&quot; src=&quot;http://fsteeg.com/images/jdt-apt-3.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;After confirming these changes, and running a full build, compilation issues in the annotations are now reported in the editor. Our code contains a precondition mentioning a variable called &lt;code&gt;c&lt;/code&gt;. But the annotated method has no &lt;code&gt;c&lt;/code&gt; parameter. This is reported as an error in the editor:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Java editor&quot; src=&quot;http://fsteeg.com/images/jdt-apt-4.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;After we fix the first precondition to &lt;code&gt;a &amp;gt; 0&lt;/code&gt;, the code compiles, and we can run it (Run &amp;gt; Run as &amp;gt; Java application).&lt;/p&gt;&lt;p&gt;To see the files generated by the processor in the &lt;code&gt;.apt_generated&lt;/code&gt; directory in Eclipse, you should disable filtering of &lt;code&gt;.*resources&lt;/code&gt; in the Package Explorer’s view menu (the little triangle &amp;gt; Filters…):&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;View menu&quot; src=&quot;http://fsteeg.com/images/jdt-apt-5.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;Also make sure you have set up your workspace to refresh automatically in Preferences &amp;gt; General &amp;gt; Workspace &amp;gt; &lt;em&gt;Refresh using native hooks or polling&lt;/em&gt;:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Preferences &amp;amp;gt; General &amp;amp;gt; Workspace&quot; src=&quot;http://fsteeg.com/images/jdt-apt-6.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;Besides the annotation processing at compile time, Contracts for Java also uses bytecode instrumentation for its runtime checks. To have the contracts checked at runtime, add &lt;code&gt;-javaagent:cofoja.contracts.asm-1.3-20160207.jar&lt;/code&gt; to the VM arguments of your run configuration (go to Run &amp;gt; Run Configurations, activate the &lt;em&gt;Arguments&lt;/em&gt; tab):&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Run configuration&quot; src=&quot;http://fsteeg.com/images/jdt-apt-7.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;Now, when running, we are made aware of the violated precondition in our code, since we are passing &lt;code&gt;-10&lt;/code&gt; as &lt;code&gt;a&lt;/code&gt;, which is not larger than &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Precondition error&quot; src=&quot;http://fsteeg.com/images/jdt-apt-8.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;After we fix the call violating the precondition to &lt;code&gt;new Numbers().add(10, 5);&lt;/code&gt; we now see that our implementation of &lt;code&gt;add&lt;/code&gt; does not fulfill the postcondition, since the result is not larger than &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;Postcondition error&quot; src=&quot;http://fsteeg.com/images/jdt-apt-9.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;After fixing our implementation to return &lt;code&gt;a + b&lt;/code&gt;, not &lt;code&gt;a - b&lt;/code&gt;, all contracts are fulfilled and the code now runs without errors.&lt;/p&gt;&lt;p&gt;Contracts for Java uses annotations in an interesting way and shows what can be achieved with annotation processing as a tool, and how Java annotation processors can integrate with Eclipse.&lt;/p&gt;&lt;p&gt;If you’re interested in creating your own processors, check out my &lt;a href=&quot;https://github.com/fsteeg/eclipse-341298&quot;&gt;test projects&lt;/a&gt; for &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=341298&quot;&gt;bug 341298&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; to get a basic setup where an annotation processor compiles the annotated Java source file.&lt;/p&gt;&lt;p&gt;For more information on these tools check out the &lt;a href=&quot;https://github.com/nhatminhle/cofoja&quot;&gt;Contracts for Java&lt;/a&gt; and &lt;a href=&quot;http://www.eclipse.org/jdt/apt/index.php&quot;&gt;JDT-APT&lt;/a&gt; project sites.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; That bug came up &lt;a href=&quot;https://fsteeg.wordpress.com/2011/02/07/setting-up-contracts-for-java-in-eclipse/&quot;&gt;in the comments&lt;/a&gt; of a &lt;a href=&quot;http://fsteeg.com/notes/setting-up-contracts-for-java-in-eclipse&quot;&gt;previous post&lt;/a&gt; about using Contracts for Java in Eclipse. &lt;/p&gt;</description>
	<pubDate>Sat, 30 Dec 2017 05:00:01 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: Remote Services without OSGi bundles</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-6467694675345091712</guid>
	<link>http://eclipseecf.blogspot.com/2017/12/remote-services-without-osgi-bundles.html</link>
	<description>Remote Services provides a dynamic, transport-independent, simple, modular way to expose micro services.   ECF has created a &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_Communication_Framework_Project&quot; target=&quot;_blank&quot;&gt;spec-compliant implementation&lt;/a&gt; along with a large and growing number of open and extensible &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot; target=&quot;_blank&quot;&gt;distribution providers&lt;/a&gt;.   &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Remote services are frequently useful for fog/edge use cases, where the communication transports (e.g. MQTT) may be different than those typically used in the cloud (e.g. http/https, jaxrs, enterprise messaging, etc).   &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Typically, remote services are run on OSGi-based frameworks and apps such as Equinox, Felix, Karaf, Eclipse, and others, and indeed ECF's RSA implementation works very well in any of these environments.   &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Perhaps less well known, however, is that remote services can be used in other inter-process environments...for example &lt;a href=&quot;https://dzone.com/articles/remote-services-between-python-and-java&quot; target=&quot;_blank&quot;&gt;between Java and Python&lt;/a&gt;.  &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It's also possible to use &lt;a href=&quot;https://wiki.eclipse.org/ECF&quot; target=&quot;_blank&quot;&gt;ECF remote services&lt;/a&gt; without an OSGi framework, i.e. running only as Java applications.   &lt;a href=&quot;https://github.com/ECF/ServiceRegistry&quot; target=&quot;_blank&quot;&gt;This repository&lt;/a&gt; has an example of using ECF remote services without an OSGi framework.   The projects are Java applications (no OSGi framework assumed), on both the &lt;a href=&quot;https://github.com/ECF/ServiceRegistry/tree/master/projects/examples/com.mycorp.examples.timeservice.sr.host&quot; target=&quot;_blank&quot;&gt;remote service provider side&lt;/a&gt;, as well as the &lt;a href=&quot;https://github.com/ECF/ServiceRegistry/tree/master/projects/examples/com.mycorp.examples.timeservice.sr.consumer.ds&quot; target=&quot;_blank&quot;&gt;remote service consumer side&lt;/a&gt;.   The examples may be run within Eclipse by using the launch configs in the example projects.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Most of the benefits of OSGi Remote Services are still available...for example the ability to use multiple distribution providers for a service, the ability to remotely discover services and dynamically respond to network failure, and the ability to use the OSGi service registry for service dynamics, and service injection.   Also, the service definition, implementation, registration and lookup are exactly the same whether via an OSGi bundle or a Java application.   This allows services to be defined consistently across runtime environments in addition to cross-distribution mechanisms.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Please &lt;a href=&quot;https://github.com/ECF/ServiceRegistry&quot; target=&quot;_blank&quot;&gt;clone the ServiceRegistry github repository&lt;/a&gt; and give things a try!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 28 Dec 2017 01:25:45 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>Andrey Loskutov: De-obfuscating Eclipse workers</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-342159971341432126.post-310337454576379523</guid>
	<link>http://javaclipse.blogspot.com/2017/12/de-obfuscating-eclipse-workers.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;Imagine you are debugging Eclipse IDE, which does something long and boring, running multiple worker threads, and of course all of them have very clear and consistent names:  Worker-1, Worker-2, Worker-3, ..., Worker-101, Worker-102, ..., you got it, I hope.&lt;br /&gt;&lt;br /&gt;What do they do, you may ask? They all work, what else:&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-AyT1uyNWilE/Wj513qlq0AI/AAAAAAAAWqo/4-C1Vky_D_4lqngsRoyZIN2o9cRS9JCogCLcBGAs/s1600/Screenshot%2B%252829%2529.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;612&quot; src=&quot;https://1.bp.blogspot.com/-AyT1uyNWilE/Wj513qlq0AI/AAAAAAAAWqo/4-C1Vky_D_4lqngsRoyZIN2o9cRS9JCogCLcBGAs/s640/Screenshot%2B%252829%2529.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Workers do work, what else we can see here?&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Now we have Christmas time, and what happens at this time? Santa is coming to all good plug-in developers!&lt;br /&gt;&lt;br /&gt;If you use latest 4.8 Eclipse SDK build (from &lt;a href=&quot;http://download.eclipse.org/eclipse/downloads/drops4/I20171222-2000/&quot;&gt;the 4.8 builds download page&lt;/a&gt;), and enable &quot;Preferences -&amp;gt; Java -&amp;gt; Debug -&amp;gt; Listen to thread name changes&quot;, you can finally see what all those busy workers above &lt;b&gt;really&lt;/b&gt; do:&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-Csp5jSSB-8w/Wj54L_HsD9I/AAAAAAAAWq4/a7OwwcqGRVkxQZK5-wQ_vyh_nvnq9_m0gCLcBGAs/s1600/jobs_animated.gif&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;612&quot; src=&quot;https://1.bp.blogspot.com/-Csp5jSSB-8w/Wj54L_HsD9I/AAAAAAAAWq4/a7OwwcqGRVkxQZK5-wQ_vyh_nvnq9_m0gCLcBGAs/s640/jobs_animated.gif&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Workers de-obfuscated&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Isn't this cool?&lt;br /&gt;&lt;br /&gt;P.S.&lt;br /&gt;For details see &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=223492&quot;&gt;bug 223492&lt;/a&gt; and &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=528808&quot;&gt;bug 528808&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Right now the preference is not enabled by default, but we hope to enable it in 4.8 M5 after some more testing if there will be no performance related side effects for bigger workspaces.&lt;br /&gt;&lt;br /&gt;Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 23 Dec 2017 15:53:08 +0000</pubDate>
	<author>noreply@blogger.com (Andrey Loskutov)</author>
</item>
<item>
	<title>Donald Raab: Happy Holidays!</title>
	<guid isPermaLink="false">https://medium.com/p/dee5c9ccf0c4</guid>
	<link>https://medium.com/@donraab/happy-holidays-dee5c9ccf0c4?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;It’s time for some Java Reindeer games.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*dY2ZJiShZomX-GCfmjHMnA.png&quot; /&gt;A Festival of lights in New York&lt;/figure&gt;&lt;p&gt;This blog is going to be mostly code. I am going to demonstrate some Eclipse Collections and Java Stream APIs, with a holiday twist. I’ll start by implementing a Reindeer Enum in Java with some help from &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;public enum Reindeer&lt;br /&gt;{&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;Dasher&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Dancer, Prancer&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Vixen&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Comet&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Cupid&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Donner&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Blitzen&lt;/em&gt;&lt;/strong&gt;,&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;Rudolph&lt;/em&gt;&lt;/strong&gt;;&lt;/pre&gt;&lt;pre&gt;    public static ImmutableList&amp;lt;Reindeer&amp;gt; all()&lt;br /&gt;    {&lt;br /&gt;        return &lt;em&gt;theMostFamousReindeerOfAll&lt;/em&gt;()&lt;br /&gt;                .newWithAll(&lt;em&gt;theOtherReindeer&lt;/em&gt;()&lt;br /&gt;                        .flatCollect(Reindeer::&lt;em&gt;toList&lt;/em&gt;));&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    private static ImmutableList&amp;lt;Twin&amp;lt;Reindeer&amp;gt;&amp;gt; theOtherReindeer()&lt;br /&gt;    {&lt;br /&gt;        return Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                &lt;strong&gt;&lt;em&gt;Dasher&lt;/em&gt;&lt;/strong&gt;.and(&lt;strong&gt;&lt;em&gt;Dancer&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                &lt;strong&gt;&lt;em&gt;Prancer&lt;/em&gt;&lt;/strong&gt;.and(&lt;strong&gt;&lt;em&gt;Vixen&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                &lt;strong&gt;&lt;em&gt;Comet&lt;/em&gt;&lt;/strong&gt;.and(&lt;strong&gt;&lt;em&gt;Cupid&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                &lt;strong&gt;&lt;em&gt;Donner&lt;/em&gt;&lt;/strong&gt;.and(&lt;strong&gt;&lt;em&gt;Blitzen&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    private static &lt;br /&gt;    ImmutableList&amp;lt;Reindeer&amp;gt; theMostFamousReindeerOfAll()&lt;br /&gt;    {&lt;br /&gt;        return Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(Reindeer.&lt;strong&gt;&lt;em&gt;Rudolph&lt;/em&gt;&lt;/strong&gt;);&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    private static &lt;br /&gt;    ImmutableList&amp;lt;Reindeer&amp;gt; toList(Twin&amp;lt;Reindeer&amp;gt; twin)&lt;br /&gt;    {&lt;br /&gt;        return Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(twin.getOne(), twin.getTwo());&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Twin&amp;lt;Reindeer&amp;gt; and(Reindeer other)&lt;br /&gt;    {&lt;br /&gt;        return Tuples.&lt;em&gt;twin&lt;/em&gt;(this, other);&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public int nameLength()&lt;br /&gt;    {&lt;br /&gt;        return this.name().length();&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Character firstLetterOfName()&lt;br /&gt;    {&lt;br /&gt;        return Character.&lt;em&gt;valueOf&lt;/em&gt;(this.name().charAt(0));&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;First, I create an &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/list/ImmutableList.html&quot;&gt;&lt;strong&gt;ImmutableList&lt;/strong&gt;&lt;/a&gt; of Reindeer with Rudolph at the front in the method named &lt;strong&gt;&lt;em&gt;all&lt;/em&gt;&lt;/strong&gt;. I create an &lt;strong&gt;&lt;em&gt;ImmutableList&lt;/em&gt;&lt;/strong&gt; of pairs of all of the other reindeer, based on their usual order in the popular song. I use the type &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/tuple/Twin.html&quot;&gt;&lt;strong&gt;Twin&lt;/strong&gt;&lt;/a&gt;, which is a &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/tuple/Pair.html&quot;&gt;&lt;strong&gt;Pair&lt;/strong&gt;&lt;/a&gt; that has the same type for both items. Finally, I used the method &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/list/ImmutableList.html#flatCollect-org.eclipse.collections.api.block.function.Function-&quot;&gt;&lt;strong&gt;flatCollect&lt;/strong&gt;&lt;/a&gt; to flatten all of the pairs of Reindeer into a single list which is appended to the &lt;strong&gt;&lt;em&gt;ImmutableList&lt;/em&gt;&lt;/strong&gt; with Rudolph using the &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/list/ImmutableList.html#newWithAll-java.lang.Iterable-&quot;&gt;&lt;strong&gt;newWithAll&lt;/strong&gt;&lt;/a&gt; method.&lt;/p&gt;&lt;p&gt;Now I will implement some tests for the Reindeer name games.&lt;/p&gt;&lt;pre&gt;&lt;em&gt;/**&lt;br /&gt; * Create a comma separated String of the Reindeer names.&lt;br /&gt; */&lt;br /&gt;&lt;/em&gt;@Test&lt;br /&gt;public void reindeerNameGame1()&lt;br /&gt;{&lt;br /&gt;    String expectedNames = &lt;strong&gt;&quot;Rudolph, &quot; &lt;/strong&gt;+&lt;br /&gt;            &lt;strong&gt;&quot;Dasher, Dancer, &quot; &lt;/strong&gt;+&lt;br /&gt;            &lt;strong&gt;&quot;Prancer, Vixen, &quot; &lt;/strong&gt;+&lt;br /&gt;            &lt;strong&gt;&quot;Comet, Cupid, &quot; &lt;/strong&gt;+&lt;br /&gt;            &lt;strong&gt;&quot;Donner, Blitzen&quot;&lt;/strong&gt;;&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            expectedNames,&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;().makeString(&lt;strong&gt;&quot;, &quot;&lt;/strong&gt;));&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            expectedNames,&lt;br /&gt;            String.&lt;em&gt;join&lt;/em&gt;(&lt;strong&gt;&quot;, &quot;&lt;/strong&gt;,&lt;br /&gt;                    Reindeer.&lt;em&gt;all&lt;/em&gt;()&lt;br /&gt;                            .asLazy()&lt;br /&gt;                            .collect(Reindeer::name)));&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            expectedNames,&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;()&lt;br /&gt;                    .stream()&lt;br /&gt;                    .map(Reindeer::name)&lt;br /&gt;                    .collect(Collectors.&lt;em&gt;joining&lt;/em&gt;(&lt;strong&gt;&quot;, &quot;&lt;/strong&gt;)));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;In this test, I show three different ways a comma separated &lt;strong&gt;&lt;em&gt;String&lt;/em&gt;&lt;/strong&gt; of the reindeer names can be created. First, I use &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/RichIterable.html#makeString-java.lang.String-&quot;&gt;&lt;strong&gt;makeString&lt;/strong&gt;&lt;/a&gt; from Eclipse Collections. The method &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/RichIterable.html#makeString-java.lang.String-&quot;&gt;&lt;strong&gt;makeString&lt;/strong&gt;&lt;/a&gt; does not require the object to be a &lt;strong&gt;&lt;em&gt;CharSequence&lt;/em&gt;&lt;/strong&gt;. It uses the &lt;strong&gt;&lt;em&gt;toString&lt;/em&gt;&lt;/strong&gt; implementation of the Object. Next, I use &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.Iterable-&quot;&gt;&lt;strong&gt;String.join&lt;/strong&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;which was added in Java 8. This method takes an &lt;strong&gt;&lt;em&gt;Iterable&lt;/em&gt;&lt;/strong&gt; of &lt;strong&gt;&lt;em&gt;CharSequence&lt;/em&gt;&lt;/strong&gt;, which I create using a &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/LazyIterable.html&quot;&gt;&lt;strong&gt;LazyIterable&lt;/strong&gt;&lt;/a&gt; with &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/LazyIterable.html#collect-org.eclipse.collections.api.block.function.Function-&quot;&gt;&lt;strong&gt;collect&lt;/strong&gt;&lt;/a&gt;. Finally, I use a &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/collection/ImmutableCollection.html#stream--&quot;&gt;&lt;strong&gt;stream&lt;/strong&gt;&lt;/a&gt; with the &lt;strong&gt;&lt;em&gt;ImmutableList&lt;/em&gt;&lt;/strong&gt; returned from &lt;strong&gt;&lt;em&gt;all&lt;/em&gt;&lt;/strong&gt; and then &lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; each Reindeer to its &lt;strong&gt;&lt;em&gt;name&lt;/em&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;em&gt;collect&lt;/em&gt;&lt;/strong&gt; them all into a &lt;strong&gt;&lt;em&gt;String&lt;/em&gt;&lt;/strong&gt; using &lt;strong&gt;&lt;em&gt;Collectors.joining&lt;/em&gt;&lt;/strong&gt;. All three approaches have the exact same result.&lt;/p&gt;&lt;pre&gt;&lt;em&gt;/**&lt;br /&gt; * Count the Reindeer names based on their size.&lt;br /&gt; */&lt;br /&gt;&lt;/em&gt;@Test&lt;br /&gt;public void reindeerNameGame2()&lt;br /&gt;{&lt;br /&gt;    IntBag nameCounts =&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;()&lt;br /&gt;                    .asLazy()&lt;br /&gt;                    .collectInt(Reindeer::nameLength).toBag();&lt;br /&gt;&lt;br /&gt;    IntBag nameCountsFromIntStream =&lt;br /&gt;            IntBags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.withAll(&lt;br /&gt;                    Reindeer.&lt;em&gt;all&lt;/em&gt;()&lt;br /&gt;                            .stream()&lt;br /&gt;                            .mapToInt(Reindeer::nameLength));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(nameCounts, nameCountsFromIntStream);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, nameCounts.occurrencesOf(5));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, nameCounts.occurrencesOf(6));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, nameCounts.occurrencesOf(7));&lt;br /&gt;&lt;br /&gt;    Bag&amp;lt;Integer&amp;gt; nameCountsBy =&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;().&lt;strong&gt;countBy&lt;/strong&gt;(Reindeer::nameLength);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, nameCountsBy.occurrencesOf(5));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, nameCountsBy.occurrencesOf(6));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, nameCountsBy.occurrencesOf(7));&lt;br /&gt;&lt;br /&gt;    Map&amp;lt;Integer, Long&amp;gt; streamNameCounts =&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;()&lt;br /&gt;                    .stream()&lt;br /&gt;                    .collect(Collectors.&lt;em&gt;groupingBy&lt;/em&gt;(&lt;br /&gt;                            Reindeer::nameLength,&lt;br /&gt;                            Collectors.&lt;em&gt;counting&lt;/em&gt;()));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(new Long(3), streamNameCounts.get(5));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(new Long(3), streamNameCounts.get(6));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(new Long(3), streamNameCounts.get(7));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;In this test, I show four different ways to count the names of the Reindeer by their length. First, I create an &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/primitive/IntBag.html&quot;&gt;&lt;strong&gt;IntBag&lt;/strong&gt;&lt;/a&gt;, by collecting all of the name lengths for the Reindeer using &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/LazyIterable.html#collectInt-org.eclipse.collections.api.block.function.primitive.IntFunction-&quot;&gt;&lt;strong&gt;collectInt&lt;/strong&gt;&lt;/a&gt; and then converting the result &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/IntIterable.html#toBag--&quot;&gt;&lt;strong&gt;toBag&lt;/strong&gt;&lt;/a&gt;. In the second case, I create an &lt;strong&gt;&lt;em&gt;IntStream&lt;/em&gt;&lt;/strong&gt; from the Reindeer by mapping their name lengths to an int using &lt;strong&gt;&lt;em&gt;mapToInt&lt;/em&gt;&lt;/strong&gt;. I use the &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/factory/bag/primitive/MutableIntBagFactory.html#withAll-java.util.stream.IntStream-&quot;&gt;&lt;strong&gt;withAll&lt;/strong&gt;&lt;/a&gt; method to create an &lt;strong&gt;&lt;em&gt;IntBag&lt;/em&gt;&lt;/strong&gt; from an &lt;strong&gt;&lt;em&gt;IntStream&lt;/em&gt;&lt;/strong&gt;. This method became available in &lt;a href=&quot;https://medium.com/@donraab/nine-features-in-eclipse-collections-9-0-a2ca97dfdf74&quot;&gt;Eclipse Collections 9.0&lt;/a&gt; (Look at Item #3 for a comparison to previous versions). The third solution is the simplest. I use the method &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/RichIterable.html#countBy-org.eclipse.collections.api.block.function.Function-&quot;&gt;&lt;strong&gt;countBy&lt;/strong&gt;&lt;/a&gt; which is available on types which extend &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/RichIterable.html&quot;&gt;&lt;strong&gt;RichIterable&lt;/strong&gt;&lt;/a&gt; in Eclipse Collections. Finally, I use &lt;strong&gt;&lt;em&gt;Stream&lt;/em&gt;&lt;/strong&gt; with &lt;strong&gt;&lt;em&gt;Collectors.groupingBy&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Collectors.counting &lt;/em&gt;&lt;/strong&gt;which results in a &lt;strong&gt;&lt;em&gt;Map&lt;/em&gt;&lt;/strong&gt; of &lt;strong&gt;&lt;em&gt;Integer&lt;/em&gt;&lt;/strong&gt; to &lt;strong&gt;&lt;em&gt;Long&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;pre&gt;&lt;em&gt;/**&lt;br /&gt; * Group Reindeer by the first letter of their names.&lt;br /&gt; */&lt;br /&gt;&lt;/em&gt;@Test&lt;br /&gt;public void reindeerNameGame3()&lt;br /&gt;{&lt;br /&gt;    Multimap&amp;lt;Character, Reindeer&amp;gt; multimap =&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;().groupBy(Reindeer::firstLetterOfName);&lt;/pre&gt;&lt;pre&gt;    Map&amp;lt;Character, List&amp;lt;Reindeer&amp;gt;&amp;gt; mapOfLists =&lt;br /&gt;            Reindeer.&lt;em&gt;all&lt;/em&gt;()&lt;br /&gt;                    .stream()&lt;br /&gt;                    .collect(Collectors.&lt;em&gt;groupingBy&lt;/em&gt;(&lt;br /&gt;                            Reindeer::firstLetterOfName));&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;Dasher, Dancer, Donner&quot;&lt;/strong&gt;,&lt;br /&gt;            multimap.get(&lt;strong&gt;'D'&lt;/strong&gt;).makeString(&lt;strong&gt;&quot;, &quot;&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;Comet, Cupid&quot;&lt;/strong&gt;,&lt;br /&gt;            multimap.get(&lt;strong&gt;'C'&lt;/strong&gt;).makeString(&lt;strong&gt;&quot;, &quot;&lt;/strong&gt;));&lt;/pre&gt;&lt;pre&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(multimap.get(&lt;strong&gt;'D'&lt;/strong&gt;), mapOfLists.get(&lt;strong&gt;'D'&lt;/strong&gt;));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(multimap.get(&lt;strong&gt;'C'&lt;/strong&gt;), mapOfLists.get(&lt;strong&gt;'C'&lt;/strong&gt;));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;In this test, I illustrate two ways to group Reindeer by the first letter of their last name. First, I use the &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/list/ImmutableList.html#groupBy-org.eclipse.collections.api.block.function.Function-&quot;&gt;&lt;strong&gt;groupBy&lt;/strong&gt;&lt;/a&gt; method available directly on &lt;strong&gt;&lt;em&gt;ImmutableList&lt;/em&gt;&lt;/strong&gt;, which returns a &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;&lt;strong&gt;Multimap&lt;/strong&gt;&lt;/a&gt;. In the second example, I use the stream method on &lt;strong&gt;&lt;em&gt;ImmutableList&lt;/em&gt;&lt;/strong&gt; and collect method on Stream with the &lt;strong&gt;&lt;em&gt;groupingBy&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;Collector&lt;/em&gt;&lt;/strong&gt; on the &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Collectors.html&quot;&gt;&lt;strong&gt;Collectors&lt;/strong&gt;&lt;/a&gt; utility class.&lt;/p&gt;&lt;p&gt;I hope you enjoyed joining in these reindeer games. I explored a bunch of &lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html&quot;&gt;Streams&lt;/a&gt; APIs in these three examples that may be useful in your own Java code.&lt;/p&gt;&lt;p&gt;Have a Happy Holiday and Happy New Year!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=dee5c9ccf0c4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 22 Dec 2017 02:59:02 +0000</pubDate>
</item>
<item>
	<title>Benjamin Cabe: Monetizing IoT Data using IOTA</title>
	<guid isPermaLink="false">https://blog.benjamin-cabe.com/?p=3059</guid>
	<link>http://feedproxy.google.com/~r/benjamin-cabe-planet-eclipse/~3/ErYhBuzemDg/monetizing-iot-data-using-iota</link>
	<description>&lt;p&gt;There is a lot of buzz around cryptocurrencies  – will BTC be over $20,000 by the time this blog post goes live? &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.3/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt; – these days, but beyond the hype, one thing is pretty clear: it enables a decentralized economy that is particularly interesting to look at from an IoT perspective.&lt;/p&gt;
&lt;p&gt;For the Internet of Things, I believe the role of cryptocurrencies and distributed ledgers is threefold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;monetization of IoT data&lt;/strong&gt; – cryptocurrencies make it really easy to implement scenarios where data producers can get a financial compensation in exchange for the value provided by the data they expose. Think of a weather station you would put on your balcony: people or corporations could have access to the feed of sensor data in exchange for some tokens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;smart contracts&lt;/strong&gt; – taking monetization a step further, smart contracts can enable higher-order, secured, transactions to automatically take place on the network. If you take the example of the weather station, you could sign a smart contract with a 3rd party whereby you get paid for giving access to your sensor data if and only if you can provide an uptime of at least 99%. Note that this would probably require a trusted third party responsible for checking your uptime and storing it in the ledger.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security&lt;/strong&gt; – manufacturers can use a distributed ledger to store information that can be used to help securely bootstrap  IoT devices, by e.g allowing customers to check the authenticity of a chip.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this blog post, we will focus on the first topic: &lt;strong&gt;monetizing IoT data&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For that, we will look at leveraging &lt;a href=&quot;https://iota.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;IOTA’s distributed ledger&lt;/a&gt;. We will be showing how anyone can be given access to “simple” IoT sensor data on an MQTT broker, while only people who are paying for it will be able to access the live, raw, data stream.&lt;/p&gt;
&lt;h2&gt;Use case&lt;/h2&gt;
&lt;p&gt;We will be basing this article on the use case of someone, let’s call her Jane, willing to give access to a live sensor data stream coming from a smart plug, granted that she gets some money (iotas) in return &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.3/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt; .&lt;/p&gt;
&lt;p&gt;The instant power consumption metrics will be published to an MQTT broker twice per second, making for a pretty accurate sampling that people might be interested in buying. On the same MQTT broker, Jane will also be making available the 1-min moving average of the power consumption for anyone to access, even if they don’t necessarily want to pay extra money.&lt;/p&gt;
&lt;p&gt;When John, who is maybe a data scientist interested in getting his hands on “real” data wants to get the power consumption from Jane’s smart plug, he has two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;access the MQTT broker and subscribe to data published on the ‘public’ &lt;code&gt;sensor/1m&lt;/code&gt; topic, for free,&lt;/li&gt;
&lt;li&gt;send some IOTAs to Jane (she’s decided that 500 iotas is what people should pay to access the data for one hour), for his MQTT client to be granted access to &lt;code&gt;sensor/live&lt;/code&gt; topic where the live, and more valuable to him, data stream is being published.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Technology being used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.eclipse.org/mosquitto&quot;&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Eclipse Mosquitto&lt;/span&gt;&lt;/a&gt; &lt;/strong&gt;as our MQTT broker of choice.&lt;/li&gt;
&lt;li&gt;Two &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;IOTA&lt;/strong&gt;&lt;/span&gt; wallets, one where the payments to Jane shall be sent to, and one for John to pay for accessing sensor data&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/belkin_wemo_.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignright wp-image-3072&quot; height=&quot;151&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/belkin_wemo_-239x300.png&quot; width=&quot;120&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/jpmens/mosquitto-auth-plug&quot;&gt;mosquitto-auth-plug&lt;/a&gt;,&lt;/strong&gt;&lt;/span&gt; a flexible authentication plug-in for Mosquitto. We will use it for implementing a flexible access-control model, based on the information available on the IOTA tangle (i.e payments)
&lt;ul&gt;
&lt;li&gt;The ACLs (access-control lists) will be stored in a &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;&lt;/span&gt; database, used as the authentication backend for mosquitto-auth-plug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Belkin WeMo Insight&lt;/strong&gt;&lt;/span&gt; smart plug.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Demo&lt;/h2&gt;
&lt;p&gt;Enough with the words! I’ve put together a video (&lt;a href=&quot;https://www.youtube.com/watch?v=jIoxBWSV-zk&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;click here&lt;/a&gt; if the video doesn’t show up below) that shows the whole scenario in action. While you will quickly realize that I do a bad job impersonating Jane and John, what I hope you notice is that this is a &lt;strong&gt;real &lt;/strong&gt;&lt;strong&gt;demo&lt;/strong&gt;, and anyone can implement something similar &lt;strong&gt;today&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The technology is here&lt;/strong&gt;, and while it has some limitations, I do think it’s worth exploring what new scenarios it enables.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-size: 24px; font-weight: bold;&quot;&gt;Check out the code&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I have &lt;a href=&quot;https://github.com/kartben/iota-mosquitto-demo&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;published all the code&lt;/a&gt; behind this proof-of-concept on &lt;a href=&quot;https://github.com/kartben/iota-mosquitto-demo&quot;&gt;my Github repository&lt;/a&gt;, please check it out and open pull requests or issues if you happen to give it a try!&lt;/p&gt;
&lt;h2&gt;Next steps?&lt;/h2&gt;
&lt;p&gt;This is obviously a simple proof-of-concept, and I am almost certain it is not free of security issues. I would certainly be happy to hear from you if you have feedback :smile:.&lt;/p&gt;
&lt;p&gt;I see at least two things that would be worth improving:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IOTA transactions, just like with many other distributed ledgers, can take a significant amount of time before they get confirmed. Having to wait for a couple hours after you’ve made a payment to effectively get access to the data can seriously impact the user experience. A nice improvement would be to rely on &lt;strong&gt;&lt;a href=&quot;https://blog.iota.org/instant-feeless-flash-channels-88572d9a4385&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;IOTA Flash Channels&lt;/a&gt;&lt;/strong&gt;,  as they allow to perform instantaneous, off-tangle transactions.&lt;/li&gt;
&lt;li&gt;In the current PoC, the Mosquitto server only accepts connections from a list of users already agreed upon. This wouldn’t be difficult, and much smarter, to allow anonymous access to anyone, and let clients interested in having full access to the data indicate in their payment message the username/password they plan on using when reconnecting as authenticated clients. This information should, of course, be encrypted with a key only known to the client and the server – this key, unique for each client, could be broadcasted to anonymous clients on the $SYS topic, for example…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do you see other areas for improvement? Have you seen similar solutions implemented with other cryptocurrencies?&lt;/p&gt;
&lt;p&gt;Note that the IOTA folks have recently announced an &lt;a href=&quot;https://datum.iota.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;IoT data market&lt;/a&gt; that seems to implement a similar idea, but I haven’t had time to look into it closely.&lt;/p&gt;
 &lt;p&gt;The post &lt;a href=&quot;https://blog.benjamin-cabe.com/2017/12/21/monetizing-iot-data-using-iota&quot; rel=&quot;nofollow&quot;&gt;Monetizing IoT Data using IOTA&lt;/a&gt; appeared first on &lt;a href=&quot;https://blog.benjamin-cabe.com&quot; rel=&quot;nofollow&quot;&gt;Benjamin Cabé&lt;/a&gt;.&lt;/p&gt;
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/benjamin-cabe-planet-eclipse/~4/ErYhBuzemDg&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 21 Dec 2017 19:34:27 +0000</pubDate>
</item>
<item>
	<title>Holger Voormann: Eclipse Oxygen.2 IDE Improvements: Java IDE, Git, C/C++</title>
	<guid isPermaLink="false">http://eclipsehowl.wordpress.com/?p=1354</guid>
	<link>https://eclipsehowl.wordpress.com/2017/12/21/eclipse-oxygen-2-ide-improvements-java-ide-git-c-c/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLnh_8hTD4yvnhXSttuewEKgKkmlIj_ND-&quot;&gt;As usual&lt;/a&gt;, I have made a short video that shows some IDE improvements of the latest Eclipse release (thanks to all of you who have contributed) in action:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U&quot;&gt;&lt;img alt=&quot;Eclipse Oxygen.2 IDE Improvements: Java IDE, Git, C/C++&quot; class=&quot;alignnone size-full wp-image-1149&quot; height=&quot;253&quot; src=&quot;https://eclipsehowl.files.wordpress.com/2017/12/eclipse_oxygen_2_ide_improvements.png?w=450&amp;amp;h=253&quot; width=&quot;450&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=26s&quot; rel=&quot;noopener&quot;&gt;Java IDE:&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=34s&quot; rel=&quot;noopener&quot;&gt;Fixed: ClassNotFoundException with a JAR in another project and with Java 9&lt;/a&gt; (&lt;a href=&quot;https://bugs.eclipse.org/525844&quot; rel=&quot;noopener&quot;&gt;bug 525844&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=48s&quot; rel=&quot;noopener&quot;&gt;Fixed: Exporting runnable JAR&lt;/a&gt; (&lt;a href=&quot;https://bugs.eclipse.org/525711&quot; rel=&quot;noopener&quot;&gt;bug 525711&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=58s&quot; rel=&quot;noopener&quot;&gt;Fixed: Running Ant in a non-Java project in a separate JRE&lt;/a&gt; (&lt;a href=&quot;https://bugs.eclipse.org/522581&quot; rel=&quot;noopener&quot;&gt;bug 522581&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=1m11s&quot; rel=&quot;noopener&quot;&gt;Fixed: In module-info requiring a not by default resolved Java 9 module&lt;/a&gt; (&lt;a href=&quot;https://bugs.eclipse.org/526054&quot; rel=&quot;noopener&quot;&gt;bug 526054&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=1m24s&quot; rel=&quot;noopener&quot;&gt;Drag and drop of entries between modulepath and classpath&lt;/a&gt; (&lt;a href=&quot;https://bugs.eclipse.org/522593&quot; rel=&quot;noopener&quot;&gt;bug 522593&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=1m36s&quot; rel=&quot;noopener&quot;&gt;Git&lt;/a&gt; (see also &lt;a href=&quot;http://eclip.se/dl&quot; rel=&quot;noopener&quot;&gt;EGit 4.9&lt;/a&gt;):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=1m40s&quot; rel=&quot;noopener&quot;&gt;Git Staging view: add/remove all/selected buttons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m02s&quot; rel=&quot;noopener&quot;&gt;Git Staging view: right-click menu with ‘Assume Unchanged’ and ‘Untrack’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m08s&quot; rel=&quot;noopener&quot;&gt;Repository switcher in the Git Staging, Git Reflog, Interactive Rebase and History views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m22s&quot; rel=&quot;noopener&quot;&gt;Redesigned icons: disable filtering, add/clone/create a repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m40s&quot; rel=&quot;noopener&quot;&gt;C/C++&lt;/a&gt; (see also &lt;a href=&quot;http://eclip.se/dm&quot; rel=&quot;noopener&quot;&gt;CDT 9.4&lt;/a&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m40s&quot; rel=&quot;noopener&quot;&gt;):&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=2m44s&quot; rel=&quot;noopener&quot;&gt;Docker Container Launch Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=4m22s&quot; rel=&quot;noopener&quot;&gt;Suppress problem comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=4m36s&quot; rel=&quot;noopener&quot;&gt;‘decltype’ improvement: showing and navigating to the declaration &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/_EY1eeQtY_U?t=4m52s&quot; rel=&quot;noopener&quot;&gt;Code formatter as a command line application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;In case you missed it:&lt;/h4&gt;
&lt;div&gt;&lt;a href=&quot;https://youtu.be/wI3VC1lhbK8&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone&quot; height=&quot;124&quot; src=&quot;https://eclipsehowl.files.wordpress.com/2017/11/eclipse_oxygen_1_ide_improvements.png?w=222&amp;amp;h=124&quot; width=&quot;222&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://youtu.be/Y0-cO9wZj6w&quot;&gt;&lt;img alt=&quot;Eclipse Oxygen IDE Improvements: General, Java and Git&quot; class=&quot;alignnone&quot; height=&quot;124&quot; src=&quot;https://eclipsehowl.files.wordpress.com/2017/06/eclipse_oxygen_0_ide_improvements2.png?w=222&amp;amp;h=124&quot; width=&quot;222&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h4&gt;Next releases (&lt;a href=&quot;http://www.google.com/calendar/embed?src=gchs7nm4nvpm837469ddj9tjlk%40group.calendar.google.com&quot;&gt;calendar&lt;/a&gt; / &lt;a href=&quot;http://www.google.com/calendar/ical/gchs7nm4nvpm837469ddj9tjlk%40group.calendar.google.com/public/basic.ics&quot;&gt;ICAL&lt;/a&gt;):&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.google.com/calendar/event?eid=Mm1jajlpa2hncHU4NzJhNzdqMXFwMDM2bDUgZ2NoczdubTRudnBtODM3NDY5ZGRqOXRqbGtAZw&quot;&gt;Oxygen.3 on March 21, 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.google.com/calendar/event?eid=NWI2cXM4MHFzc2IzbHRvYWZhMjVmajJnbzkgZ2NoczdubTRudnBtODM3NDY5ZGRqOXRqbGtAZw&quot;&gt;Photon.0 on June 27, 2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Thu, 21 Dec 2017 12:41:26 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EclipseSource Oomph Profile – updated to Oxygen.2</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=37684</guid>
	<link>https://eclipsesource.com/blogs/2017/12/21/eclipsesource-oomph-profile-updated-to-oxygen-2/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Yesterday, Oxygen.2 has been released, a new version of the Eclipse IDE and platform. It contains many useful improvements, so it is worth to update. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One small but useful improvement we especially like is the enhanced EGit staging view. It provides new buttons to stage and unstage files (selected one or all), as well as to sort the unstaged changes. Further, the context menu directly allows to ignore files, assume them to be unchanged and even directly delete them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-37685&quot; height=&quot;138&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/12/Selection_049-300x125.jpg&quot; width=&quot;331&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Futher improvements, e.g. for Java 9 support are summarized in the following video provided by Holger Voormann:&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In case you use our EclipseSource Oomph profile (see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2015/08/17/introducing-the-eclipsesource-oomph-profile/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details), you should get a notification and Oomph will apply the update automatically. If you do not get the notification, just navigate to the menu entry “Help” =&amp;gt; “Perform Set-Up Task”.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This will automatically update all plugins to Oxygen, but keep all existing settings untouched.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-medium wp-image-37686&quot; height=&quot;172&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/12/Selection_048-300x172.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Have fun with Oxygen.2!&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 21 Dec 2017 11:51:14 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x based Framework URL Shortener Backend</title>
	<guid isPermaLink="true">http://vertx.io/blog/eclipse-vert-x-based-framework-url-shortener-backend</guid>
	<link>http://vertx.io/blog/eclipse-vert-x-based-framework-url-shortener-backend</link>
	<description>&lt;article&gt;&lt;h2 id=&quot;aws-lambda-vertx-framework-url-shortener-backend&quot;&gt;AWS Lambda &amp;amp; Vertx Framework URL Shortener Backend&lt;/h2&gt;
&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;p&gt;Recently I stumbled upon &lt;a href=&quot;http://vertx.io/&quot;&gt;&lt;strong&gt;Vertx&lt;/strong&gt;&lt;/a&gt;. &lt;strong&gt;Event-driven, asynchronized, lightweight, reactive, highly performant, polyglot&lt;/strong&gt; application framework. Ideal for writing &lt;strong&gt;micro-services&lt;/strong&gt;. I played around with it for a while and really enjoyed the concept of &lt;strong&gt;serverless&lt;/strong&gt; applications.&lt;/p&gt;
&lt;p&gt;I developed a few apps and cases and started to wonder how to run and deploy them so that I get a 100% reliable service. I suddenly remembered the tech seminar that I attended recently, specifically session about serverless apps with &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;&lt;strong&gt;AWS&lt;/strong&gt;&lt;/a&gt; (Amazon Web Services) &lt;strong&gt;Lambda&lt;/strong&gt;. Lambda is a serverless compute service that runs your code in response to events and automatically manages the underlying compute resources for you. Fairly similar concepts &lt;strong&gt;Vertx&lt;/strong&gt; and &lt;strong&gt;AWS Lambda&lt;/strong&gt;, so maybe they complement each other? As it turns out they do, &lt;strong&gt;Vertx&lt;/strong&gt; can get most of your &lt;strong&gt;Lambdas&lt;/strong&gt;…&lt;/p&gt;
&lt;p&gt;Using the &lt;a href=&quot;https://serverless.com/&quot;&gt;&lt;strong&gt;Serverless Framework&lt;/strong&gt;&lt;/a&gt; to create, manage and deploy your new &lt;strong&gt;Lambdas&lt;/strong&gt; I was able to get this &lt;strong&gt;micro-service&lt;/strong&gt; up and running in no time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Enough with the talk, lets see the implementation.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Handler Class, entry point of AWS Request.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first issue that I had was the &lt;strong&gt;sync&lt;/strong&gt; Event Handler that is provided by AWS. So I had to by pass it with Future. In the Handler class I first initiate Vertx instance in a static block and deploy few Verticles that will do the work. This class only receives the event, extracts needed data from the request and passes the data to Vertx EventBus. After the Consumers handle the request, Handler class will generate a proper response and finish the AWS request.&lt;/p&gt;


&lt;p&gt;&lt;em&gt;Line 4-18:&lt;/em&gt; This is where Vertx instance is created, Verticles are deployed and &lt;strong&gt;Async JDBC&lt;/strong&gt; client is created. I figured out that it is better to created JDBC client here as in some cases I was timeout when that logic was in the Verticle start method.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Line 27-36:&lt;/em&gt; These are helper lines, parsing and formatting the data so I can pass it to the Verticles.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Line 38-45:&lt;/em&gt; I have decided to map the consumers to the address that is made of request method and url path, example POST/api. This means each API request is mapped to its own consumer in Verticle class.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Line 47-77:&lt;/em&gt; This is nothing but a block of code that handles the response that was passed from Verticles to the Future and generates the final response that will be return to API Gateway.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;UrlService, Vertx Verticle.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Verticle class is pretty forward. Consumers that will process the message, methods for working with JDBC and helper methods for hashing/dehashing id. The logic behind url shortening is fairly simple here. Each long url is stored in database with a unique id and few additional columns. Row id is hashed and returned as short url. When retrieving long url hash is decoded to row id and long url is retrieved. Later user is redirected to long url. With this implementation, on 6 char short url (characters after the domain) you get 62^6 combinations which is 56 800 235 584 rows for storing your urls. TinyURL is currently at 6 long char urls (characters after domain). You can of course implement methods for reusing and recycling ids.&lt;/p&gt;


&lt;p&gt;As said, this is all fairly straight forward, if you are already familiar with &lt;strong&gt;Vertx&lt;/strong&gt;. If you are thinking why have I repeated the code for establish a &lt;strong&gt;JDBC&lt;/strong&gt; connection, here is the explanation &lt;em&gt;(line: 10-16)&lt;/em&gt;. I was getting Timeouts when creating JDBC connection in Verticles. To avoid this I also added this code to my Handler class. This way connection is created there and because of the &lt;strong&gt;Vertx&lt;/strong&gt; implementation any later attempt to create it again will result in just getting the instances from the first invocation. This escaped the need to pass the instances directly from the Handler class when creating Verticle instances.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Serverless configuration.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Lastly I would like to share the serverless.yml, confirmation file that allows seamlessly deploy and management of AWS Lambda. With just a few commands and lines of configuration you are able to configure all necessary steps for deploying your AWS Lambda. Framework takes care of making configuration of Api-Gateway and other AWS hassle that would otherwise needed to be done by hand. In this case Lambda is invoked by HTTP events.&lt;/p&gt;


&lt;h3 id=&quot;performance-and-tests&quot;&gt;Performance and Tests&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Vertx&lt;/strong&gt; async capabilities eased the stress and memory needs of traditional &lt;strong&gt;AWS Lambdas&lt;/strong&gt; with sync methods. After performing load tests Lambdas that were written using Vertx framework preformed &lt;strong&gt;10% faster and consumed 40% less memory&lt;/strong&gt;. As I have read somewhere in Vertx documentation, Sync methods will definitely finish the first request faster but in total Async will be faster in the end. This savings in memory and time will definitely reduce the cost of running your Lambdas and the little overhead with additional code is for sure worth it.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;To follow the pace of demanding needs for fast and resilient services we need to move from traditional Monoliths. Embracing the &lt;strong&gt;micro service&lt;/strong&gt; architecture alone will not cut it, not anymore. With the rise and rapid advancement of &lt;strong&gt;Cloud&lt;/strong&gt; solutions it has never been so easy to make a truly &lt;strong&gt;Serverless&lt;/strong&gt; systems build upon network of &lt;strong&gt;micro services&lt;/strong&gt;.
As you have seen &lt;strong&gt;Vertx&lt;/strong&gt; with its async API makes the full advantage of &lt;strong&gt;AWS Lambdas&lt;/strong&gt;, embracing them while also improving the performance and lowering the costs. With the help from &lt;strong&gt;Serverless Framework&lt;/strong&gt; writing, deploying and managing your &lt;strong&gt;Lambdas&lt;/strong&gt; has never been so easy.&lt;/p&gt;
&lt;p&gt;If you are interested in the whole project, you can find it on &lt;a href=&quot;https://github.com/pendula95/vertx-aws-url-shortener-service/tree/master&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block info&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Info &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; this is a re-publication of the following &lt;a href=&quot;http://lazarbulic.com/blog/2017/11/10/aws-lambda-vertx-framework-url-shortener-backend/&quot;&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.9.2 Released!</title>
	<guid isPermaLink="false">http://www.eclipse.org/webtools/news.php#permalink179</guid>
	<link>http://eclipse.org/webtools/releases/3.9.2</link>
	<description>&lt;div&gt;
      Web Tools Platform 3.9.2 has been released!  &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt; and update can be performed using the Oxygen Update Site at
      &lt;a href=&quot;http://download.eclipse.org/releases/oxygen/&quot;&gt;http://download.eclipse.org/releases/oxygen/&lt;/a&gt; or through the &lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;.
      Release 3.9.2 &lt;a href=&quot;https://www.eclipse.org/webtools/releases/3.9.2/&quot;&gt;fixes&lt;/a&gt; issues that occur in prior releases or have been reported since 3.9's release. WTP 3.9.2 is featured in the Oxygen.2
          &lt;a href=&quot;https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/oxygen2&quot;&gt;Eclipse IDE for Java EE Developers&lt;/a&gt;, with selected portions also included in &lt;a href=&quot;http://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;.  Adopters can download &lt;a href=&quot;http://download.eclipse.org/webtools/downloads/&quot;&gt;the build itself&lt;/a&gt; directly.
       WTP 3.9.3 is planned for late March, as part of Oxygen.3.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/webtools/news.php#permalink179&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 20 Dec 2017 20:01:00 +0000</pubDate>
</item>

</channel>
</rss>
