package system;

import java.util.ArrayList;

import object.Character;
import object.NewtonObject;
import processing.core.PApplet;
import processing.core.PVector;

public class GameManager {
	public PApplet parent;
	public ResManager res;
	public Map map;
	public Camera cam;
	public AKeyPress akp;
	public Character man;
	public GameSystem system;
	public Animator animator;
	/**
	 * 需要手动在renderFClist和updateList中注册
	 */
	public ArrayList<NewtonObject> nobjlist = new ArrayList<NewtonObject>();
	// list
	public ArrayList<Renderable> renderlist = new ArrayList<Renderable>();

	public void loadRenderList() {
		renderlist.clear();
		// sign renderable objects up here

		// end
		GameSystem.moveNullObject(renderlist);
	}

	public ArrayList<RenderableFromCamera> renderFClist = new ArrayList<RenderableFromCamera>();

	public void loadRenderFCList() {
		renderFClist.clear();
		// sign renderable from camera objects up here
		renderFClist.add(map);
		renderFClist.add(man);
		renderFClist.add(animator);
		// end
		GameSystem.moveNullObject(renderFClist);
	}

	public ArrayList<NeedUpdate> updatelist = new ArrayList<NeedUpdate>();

	public void loadNeedUpdateList() {
		updatelist.clear();
		// sign renderable from camera objects up here
		updatelist.add(akp);
		updatelist.add(man);
		updatelist.add(cam);
		updatelist.add(map);
		updatelist.add(animator);
		// end
		GameSystem.moveNullObject(updatelist);
	}
	
	public void manKilledUpdate(){
		animator.clear();
	}
	
	// global properties
	public int level = 1;
	public int life = 3;
	public boolean die = false;
	public boolean controlable = false;
	public Mode gameMode = Mode.OP;

	public enum Mode {
		OP, LOAD, RUN, PAUSE, DIE
	}

	/**
	 * 0-start;1-load;2-exit
	 */
	public int selection = 0;
	
	//Maths
	public PVector localToWorld(PVector l) {
		return new PVector(
				localXToWorldX(l.x),
				localYToWorldY(l.y)
				);
	}
	
	public float localXToWorldX(float lx) {
		return PApplet.map(lx,0,parent.width,cam.p.x-cam.area.getWidth()/2f,cam.p.x+cam.area.getWidth()/2f);
	}
	
	public float localYToWorldY(float ly) {
		return PApplet.map(ly,0,parent.height,cam.p.y-cam.area.getHeight()/2f,cam.p.y+cam.area.getHeight()/2f);
	}
	
	public PVector worldToLocal(PVector w) {
		return new PVector(
				worldXToLocalX(w.x),
				worldYToLocalY(w.y)
				);
	}
	
	public float worldXToLocalX(float wx) {
		return PApplet.map(wx,cam.p.x-cam.area.getWidth()/2f,cam.p.x+cam.area.getWidth()/2f,0,parent.width);
	}
	
	public float worldYToLocalY(float wy) {
		return PApplet.map(wy,cam.p.y-cam.area.getHeight()/2f,cam.p.y+cam.area.getHeight()/2f,0,parent.height);
	}
	
	public PVector worldVecToLocalVec(PVector wv) {
		PVector out = new PVector().set(wv);
		
	}
}
